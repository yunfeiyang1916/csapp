     1                                  ;硬盘主引导扇区代码
     2                                  
     3                                  %include "pm.inc"	; 常量, 宏, 以及一些说明
     4                              <1> ; 描述符图示
     5                              <1> 
     6                              <1> ; 图示一
     7                              <1> ;
     8                              <1> ;  ------ ┏━━┳━━┓高地址
     9                              <1> ;         ┃ 7  ┃ 段 ┃
    10                              <1> ;         ┣━━┫    ┃
    11                              <1> ;                  基
    12                              <1> ;  字节 7 ┆    ┆    ┆
    13                              <1> ;                  址
    14                              <1> ;         ┣━━┫ ② ┃
    15                              <1> ;         ┃ 0  ┃    ┃
    16                              <1> ;  ------ ┣━━╋━━┫
    17                              <1> ;         ┃ 7  ┃ G  ┃
    18                              <1> ;         ┣━━╉──┨
    19                              <1> ;         ┃ 6  ┃ D  ┃
    20                              <1> ;         ┣━━╉──┨
    21                              <1> ;         ┃ 5  ┃ 0  ┃
    22                              <1> ;         ┣━━╉──┨
    23                              <1> ;         ┃ 4  ┃ AVL┃
    24                              <1> ;  字节 6 ┣━━╉──┨
    25                              <1> ;         ┃ 3  ┃    ┃
    26                              <1> ;         ┣━━┫ 段 ┃
    27                              <1> ;         ┃ 2  ┃ 界 ┃
    28                              <1> ;         ┣━━┫ 限 ┃
    29                              <1> ;         ┃ 1  ┃    ┃
    30                              <1> ;         ┣━━┫ ② ┃
    31                              <1> ;         ┃ 0  ┃    ┃
    32                              <1> ;  ------ ┣━━╋━━┫
    33                              <1> ;         ┃ 7  ┃ P  ┃
    34                              <1> ;         ┣━━╉──┨
    35                              <1> ;         ┃ 6  ┃    ┃
    36                              <1> ;         ┣━━┫ DPL┃
    37                              <1> ;         ┃ 5  ┃    ┃
    38                              <1> ;         ┣━━╉──┨
    39                              <1> ;         ┃ 4  ┃ S  ┃
    40                              <1> ;  字节 5 ┣━━╉──┨
    41                              <1> ;         ┃ 3  ┃    ┃
    42                              <1> ;         ┣━━┫ T  ┃
    43                              <1> ;         ┃ 2  ┃ Y  ┃
    44                              <1> ;         ┣━━┫ P  ┃
    45                              <1> ;         ┃ 1  ┃ E  ┃
    46                              <1> ;         ┣━━┫    ┃
    47                              <1> ;         ┃ 0  ┃    ┃
    48                              <1> ;  ------ ┣━━╋━━┫
    49                              <1> ;         ┃ 23 ┃    ┃
    50                              <1> ;         ┣━━┫    ┃
    51                              <1> ;         ┃ 22 ┃    ┃
    52                              <1> ;         ┣━━┫ 段 ┃
    53                              <1> ;
    54                              <1> ;   字节  ┆    ┆ 基 ┆
    55                              <1> ; 2, 3, 4
    56                              <1> ;         ┣━━┫ 址 ┃
    57                              <1> ;         ┃ 1  ┃ ① ┃
    58                              <1> ;         ┣━━┫    ┃
    59                              <1> ;         ┃ 0  ┃    ┃
    60                              <1> ;  ------ ┣━━╋━━┫
    61                              <1> ;         ┃ 15 ┃    ┃
    62                              <1> ;         ┣━━┫    ┃
    63                              <1> ;         ┃ 14 ┃    ┃
    64                              <1> ;         ┣━━┫ 段 ┃
    65                              <1> ;
    66                              <1> ; 字节 0,1┆    ┆ 界 ┆
    67                              <1> ;
    68                              <1> ;         ┣━━┫ 限 ┃
    69                              <1> ;         ┃ 1  ┃ ① ┃
    70                              <1> ;         ┣━━┫    ┃
    71                              <1> ;         ┃ 0  ┃    ┃
    72                              <1> ;  ------ ┗━━┻━━┛低地址
    73                              <1> ;
    74                              <1> 
    75                              <1> 
    76                              <1> ; 图示二
    77                              <1> 
    78                              <1> ; 高地址………………………………………………………………………低地址
    79                              <1> 
    80                              <1> ; |   7   |   6   |   5   |   4   |   3   |   2   |   1   |   0    |
    81                              <1> ; |7654321076543210765432107654321076543210765432107654321076543210|	<- 共 8 字节
    82                              <1> ; |--------========--------========--------========--------========|
    83                              <1> ; ┏━━━┳━━━━━━━┳━━━━━━━━━━━┳━━━━━━━┓
    84                              <1> ; ┃31..24┃   (见下图)   ┃     段基址(23..0)    ┃ 段界限(15..0)┃
    85                              <1> ; ┃      ┃              ┃                      ┃              ┃
    86                              <1> ; ┃ 基址2┃③│②│    ①┃基址1b│   基址1a     ┃    段界限1   ┃
    87                              <1> ; ┣━━━╋━━━┳━━━╋━━━━━━━━━━━╋━━━━━━━┫
    88                              <1> ; ┃   %6 ┃  %5  ┃  %4  ┃  %3  ┃     %2       ┃       %1     ┃
    89                              <1> ; ┗━━━┻━━━┻━━━┻━━━┻━━━━━━━┻━━━━━━━┛
    90                              <1> ;         │                \_________
    91                              <1> ;         │                          \__________________
    92                              <1> ;         │                                             \________________________________________________
    93                              <1> ;         │                                                                                              ;         ┏━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┓
    95                              <1> ;         ┃ 7  ┃ 6  ┃ 5  ┃ 4  ┃ 3  ┃ 2  ┃ 1  ┃ 0  ┃ 7  ┃ 6  ┃ 5  ┃ 4  ┃ 3  ┃ 2  ┃ 1  ┃ 0  ┃
    96                              <1> ;         ┣━━╋━━╋━━╋━━╋━━┻━━┻━━┻━━╋━━╋━━┻━━╋━━╋━━┻━━┻━━┻━━┫
    97                              <1> ;         ┃ G  ┃ D  ┃ 0  ┃ AVL┃   段界限 2 (19..16)  ┃  P ┃   DPL    ┃ S  ┃       TYPE           ┃
    98                              <1> ;         ┣━━┻━━┻━━┻━━╋━━━━━━━━━━━╋━━┻━━━━━┻━━┻━━━━━━━━━━━┫
    99                              <1> ;         ┃      ③: 属性 2      ┃    ②: 段界限 2      ┃                   ①: 属性1                  ┃
   100                              <1> ;         ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━━━━━━━━━━━━━┛
   101                              <1> ;       高地址                                                                                          低地址
   102                              <1> ;
   103                              <1> ;
   104                              <1> 
   105                              <1> ; 说明:
   106                              <1> ;
   107                              <1> ; (1) P:    存在(Present)位。
   108                              <1> ;		P=1 表示描述符对地址转换是有效的，或者说该描述符所描述的段存在，即在内存中；
   109                              <1> ;		P=0 表示描述符对地址转换无效，即该段不存在。使用该描述符进行内存访问时会引起异常。
   110                              <1> ;
   111                              <1> ; (2) DPL:  表示描述符特权级(Descriptor Privilege level)，共2位。它规定了所描述段的特权级，用于特权检查，以决定对该段能否访问。 
   112                              <1> ;
   113                              <1> ; (3) S:   说明描述符的类型。
   114                              <1> ;		对于存储段描述符而言，S=1，以区别与系统段描述符和门描述符(S=0)。 
   115                              <1> ;
   116                              <1> ; (4) TYPE: 说明存储段描述符所描述的存储段的具体属性。
   117                              <1> ;
   118                              <1> ;		 
   119                              <1> ;	数据段类型	类型值		说明
   120                              <1> ;			----------------------------------
   121                              <1> ;			0		只读 
   122                              <1> ;			1		只读、已访问 
   123                              <1> ;			2		读/写 
   124                              <1> ;			3		读/写、已访问 
   125                              <1> ;			4		只读、向下扩展 
   126                              <1> ;			5		只读、向下扩展、已访问 
   127                              <1> ;			6		读/写、向下扩展 
   128                              <1> ;			7		读/写、向下扩展、已访问 
   129                              <1> ;
   130                              <1> ;		
   131                              <1> ;			类型值		说明
   132                              <1> ;	代码段类型	----------------------------------
   133                              <1> ;			8		只执行 
   134                              <1> ;			9		只执行、已访问 
   135                              <1> ;			A		执行/读 
   136                              <1> ;			B		执行/读、已访问 
   137                              <1> ;			C		只执行、一致码段 
   138                              <1> ;			D		只执行、一致码段、已访问 
   139                              <1> ;			E		执行/读、一致码段 
   140                              <1> ;			F		执行/读、一致码段、已访问 
   141                              <1> ;
   142                              <1> ;		
   143                              <1> ;	系统段类型	类型编码	说明
   144                              <1> ;			----------------------------------
   145                              <1> ;			0		<未定义>
   146                              <1> ;			1		可用286TSS
   147                              <1> ;			2		LDT
   148                              <1> ;			3		忙的286TSS
   149                              <1> ;			4		286调用门
   150                              <1> ;			5		任务门
   151                              <1> ;			6		286中断门
   152                              <1> ;			7		286陷阱门
   153                              <1> ;			8		未定义
   154                              <1> ;			9		可用386TSS
   155                              <1> ;			A		<未定义>
   156                              <1> ;			B		忙的386TSS
   157                              <1> ;			C		386调用门
   158                              <1> ;			D		<未定义>
   159                              <1> ;			E		386中断门
   160                              <1> ;			F		386陷阱门
   161                              <1> ;
   162                              <1> ; (5) G:    段界限粒度(Granularity)位。
   163                              <1> ;		G=0 表示界限粒度为字节；
   164                              <1> ;		G=1 表示界限粒度为4K 字节。
   165                              <1> ;           注意，界限粒度只对段界限有效，对段基地址无效，段基地址总是以字节为单位。 
   166                              <1> ;
   167                              <1> ; (6) D:    D位是一个很特殊的位，在描述可执行段、向下扩展数据段或由SS寄存器寻址的段(通常是堆栈段)的三种描述符中的意义各不相同。 
   168                              <1> ;           ⑴ 在描述可执行段的描述符中，D位决定了指令使用的地址及操作数所默认的大小。
   169                              <1> ;		① D=1表示默认情况下指令使用32位地址及32位或8位操作数，这样的代码段也称为32位代码段；
   170                              <1> ;		② D=0 表示默认情况下，使用16位地址及16位或8位操作数，这样的代码段也称为16位代码段，它与80286兼容。可以使用地址大小前缀和操作数大小前缀分别改变默认的地址或操作数的大小。 
   171                              <1> ;           ⑵ 在向下扩展数据段的描述符中，D位决定段的上部边界。
   172                              <1> ;		① D=1表示段的上部界限为4G；
   173                              <1> ;		② D=0表示段的上部界限为64K，这是为了与80286兼容。 
   174                              <1> ;           ⑶ 在描述由SS寄存器寻址的段描述符中，D位决定隐式的堆栈访问指令(如PUSH和POP指令)使用何种堆栈指针寄存器。
   175                              <1> ;		① D=1表示使用32位堆栈指针寄存器ESP；
   176                              <1> ;		② D=0表示使用16位堆栈指针寄存器SP，这与80286兼容。 
   177                              <1> ;
   178                              <1> ; (7) AVL:  软件可利用位。80386对该位的使用未左规定，Intel公司也保证今后开发生产的处理器只要与80386兼容，就不会对该位的使用做任何定义或规定。 
   179                              <1> ;
   180                              <1> 
   181                              <1> 
   182                              <1> ;----------------------------------------------------------------------------
   183                              <1> ; 在下列类型值命名中：
   184                              <1> ;       DA_  : Descriptor Attribute
   185                              <1> ;       D    : 数据段
   186                              <1> ;       C    : 代码段
   187                              <1> ;       S    : 系统段
   188                              <1> ;       R    : 只读
   189                              <1> ;       RW   : 读写
   190                              <1> ;       A    : 已访问
   191                              <1> ;       其它 : 可按照字面意思理解
   192                              <1> ;----------------------------------------------------------------------------
   193                              <1> 
   194                              <1> ; 描述符类型
   195                              <1> DA_32		EQU	0x4000	; 32 位段
   196                              <1> 
   197                              <1> ;占用2位，特权级
   198                              <1> DA_DPL0		EQU	  0x00	; DPL = 0
   199                              <1> DA_DPL1		EQU	  0x20	; DPL = 1
   200                              <1> DA_DPL2		EQU	  0x40	; DPL = 2
   201                              <1> DA_DPL3		EQU	  0x60	; DPL = 3
   202                              <1> 
   203                              <1> ; 存储段描述符类型
   204                              <1> DA_DR		EQU	0x90	; 存在的只读数据段类型值
   205                              <1> DA_DRW		EQU	0x92	; 存在的可读写数据段属性值
   206                              <1> DA_DRWA		EQU	0x93	; 存在的已访问可读写数据段类型值
   207                              <1> DA_C		EQU	0x98	; 存在的只执行代码段属性值
   208                              <1> DA_CR		EQU	0x9A	; 存在的可执行可读代码段属性值
   209                              <1> DA_CCO		EQU	0x9C	; 存在的只执行一致代码段属性值
   210                              <1> DA_CCOR		EQU	0x9E	; 存在的可执行可读一致代码段属性值
   211                              <1> 
   212                              <1> ; 系统段描述符类型
   213                              <1> DA_LDT		EQU	  0x82	; 局部描述符表段类型值
   214                              <1> DA_TaskGate	EQU	  0x85	; 任务门类型值
   215                              <1> DA_386TSS	EQU	  0x89	; 可用 386 任务状态段类型值
   216                              <1> DA_386CGate	EQU	  0x8C	; 386 调用门类型值
   217                              <1> DA_386IGate	EQU	  0x8E	; 386 中断门类型值
   218                              <1> DA_386TGate	EQU	  0x8F	; 386 陷阱门类型值
   219                              <1> 
   220                              <1> 
   221                              <1> ; 选择子图示:
   222                              <1> ;         ┏━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━━━━━━━━━━━━━━━━━━┓
   223                              <1> ;         ┃ 15 ┃ 14 ┃ 13 ┃ 12 ┃ 11 ┃ 10 ┃ 9  ┃ 8  ┃ 7  ┃ 6  ┃ 5  ┃ 4  ┃ 3  ┃ 2  ┃ 1  ┃ 0  ┃
   224                              <1> ;         ┣━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━╋━━╋━━┻━━━━━━━━━━━━━━━━━━━┫
   225                              <1> ;         ┃                                 描述符索引                      ┃ TI ┃   RPL   ┃
   226                              <1> ;         ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┻━━┻━━━━━━━━━━━━━━━━━━━━━━┛
   227                              <1> ;
   228                              <1> ; RPL(Requested Privilege Level): 请求特权级，用于特权检查。
   229                              <1> ;
   230                              <1> ; TI(Table Indicator): 引用描述符表指示位
   231                              <1> ;	TI=0 指示从全局描述符表GDT中读取描述符；
   232                              <1> ;	TI=1 指示从局部描述符表LDT中读取描述符。
   233                              <1> ;
   234                              <1> 
   235                              <1> ;----------------------------------------------------------------------------
   236                              <1> ; 选择子类型值说明
   237                              <1> ; 其中:
   238                              <1> ;       SA_  : Selector Attribute
   239                              <1> 
   240                              <1> SA_RPL0		EQU	0	; ┓
   241                              <1> SA_RPL1		EQU	1	; ┣ RPL
   242                              <1> SA_RPL2		EQU	2	; ┃
   243                              <1> SA_RPL3		EQU	3	; ┛
   244                              <1> 
   245                              <1> SA_TIG		EQU	0	; ┓TI
   246                              <1> SA_TIL		EQU	4	; ┛
   247                              <1> ;----------------------------------------------------------------------------
   248                              <1> 
   249                              <1> 
   250                              <1> 
   251                              <1> ; 宏 ------------------------------------------------------------------------------------------------------
   252                              <1> ;
   253                              <1> ; 描述符，3个参数
   254                              <1> ; usage: Descriptor Base, Limit, Attr
   255                              <1> ;        Base:  dd 段基址
   256                              <1> ;        Limit: dd (low 20 bits available) 段界限
   257                              <1> ;        Attr:  dw (lower 4 bits of higher byte are always 0) 段属性
   258                              <1> %macro Descriptor 3
   259                              <1> 	dw	%2 & 0FFFFh				; 段界限1
   260                              <1> 	dw	%1 & 0FFFFh				; 段基址1
   261                              <1> 	db	(%1 >> 16) & 0FFh			; 段基址2
   262                              <1> 	dw	((%2 >> 8) & 0F00h) | (%3 & 0F0FFh)	; 属性1 + 段界限2 + 属性2
   263                              <1> 	db	(%1 >> 24) & 0FFh			; 段基址3
   264                              <1> %endmacro ; 共 8 字节
   265                              <1> ;
   266                              <1> ; 门，4个参数
   267                              <1> ; usage: Gate Selector, Offset, DCount, Attr
   268                              <1> ;        Selector:  dw
   269                              <1> ;        Offset:    dd
   270                              <1> ;        DCount:    db
   271                              <1> ;        Attr:      db
   272                              <1> %macro Gate 4
   273                              <1> 	dw	(%2 & 0FFFFh)				; 偏移1
   274                              <1> 	dw	%1					; 选择子
   275                              <1> 	dw	(%3 & 1Fh) | ((%4 << 8) & 0FF00h)	; 属性
   276                              <1> 	dw	((%2 >> 16) & 0FFFFh)			; 偏移2
   277                              <1> %endmacro ; 共 8 字节
   278                              <1> ; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     4                                  
     5                                  
     6                                  org	07c00h
     7 00000000 EB1E                    jmp	LABEL_BEGIN
     8                                  
     9                                  ;-----------全局描述符----------------------------------------------------------------
    10                                      ;                              段基址,       段界限     , 属性
    11                                      LABEL_GDT:	        Descriptor         0,                0, 0               ; 空描述符
    11                              <1>  LABEL_GDT: 
   259 00000002 0000                <1>  dw %2 & 0FFFFh
   260 00000004 0000                <1>  dw %1 & 0FFFFh
   261 00000006 00                  <1>  db (%1 >> 16) & 0FFh
   262 00000007 0000                <1>  dw ((%2 >> 8) & 0F00h) | (%3 & 0F0FFh)
   263 00000009 00                  <1>  db (%1 >> 24) & 0FFh
    12                                      LABEL_DESC_CODE32:  Descriptor         0, SegCode32Len - 1, DA_C + DA_32    ;代码段描述符
    12                              <1>  LABEL_DESC_CODE32: 
   259 0000000A 1400                <1>  dw %2 & 0FFFFh
   260 0000000C 0000                <1>  dw %1 & 0FFFFh
   261 0000000E 00                  <1>  db (%1 >> 16) & 0FFh
   262 0000000F 9840                <1>  dw ((%2 >> 8) & 0F00h) | (%3 & 0F0FFh)
   263 00000011 00                  <1>  db (%1 >> 24) & 0FFh
    13                                      LABEL_DESC_VIDEO:   Descriptor   0xB8000,           0xffff, DA_DRW          ;显存段描述符
    13                              <1>  LABEL_DESC_VIDEO: 
   259 00000012 FFFF                <1>  dw %2 & 0FFFFh
   260 00000014 0080                <1>  dw %1 & 0FFFFh
   261 00000016 0B                  <1>  db (%1 >> 16) & 0FFh
   262 00000017 9200                <1>  dw ((%2 >> 8) & 0F00h) | (%3 & 0F0FFh)
   263 00000019 00                  <1>  db (%1 >> 24) & 0FFh
    14                                  
    15                                      GdtLen equ $-LABEL_DESC_VIDEO       ;全局描述符大小
    16                                      ;全局描述符线性地址
    17 0000001A 0700                        GdtPtr dw GdtLen-1                  ;GDT界限
    18 0000001C 00000000                           dd 0                         ;GDT首地址
    19                                  
    20                                      ;选择子
    21                                      SelectorCode32 equ LABEL_DESC_CODE32-LABEL_GDT
    22                                      SelectorVideo  equ LABEL_DESC_VIDEO-LABEL_GDT
    23                                  
    24                                      LABEL_BEGIN:
    25 00000020 8CC8                            mov	ax, cs
    26 00000022 8ED8                            mov	ds, ax
    27 00000024 8EC0                            mov	es, ax
    28 00000026 8ED0                            mov	ss, ax
    29 00000028 BC0001                          mov	sp, 0x0100
    30                                  
    31                                          ; 初始化 32 位代码段描述符
    32 0000002B 6631C0                          xor	eax, eax
    33 0000002E 8CC8                            mov	ax, cs
    34 00000030 66C1E004                        shl	eax, 4                              ;代码段左移4位，把低4位留出
    35 00000034 6605[79000000]                  add	eax, LABEL_SEG_CODE32
    36 0000003A A3[0C00]                        mov	word [LABEL_DESC_CODE32 + 2], ax
    37 0000003D 66C1E810                        shr	eax, 16
    38 00000041 A2[0E00]                        mov	byte [LABEL_DESC_CODE32 + 4], al
    39 00000044 8826[1100]                      mov	byte [LABEL_DESC_CODE32 + 7], ah
    40                                  
    41                                          ; 为加载 GDTR 作准备
    42 00000048 6631C0                          xor	eax, eax
    43 0000004B 8CD8                            mov	ax, ds
    44 0000004D 66C1E004                        shl	eax, 4
    45 00000051 6605[02000000]                  add	eax, LABEL_GDT		; eax <- gdt 基地址
    46 00000057 66A3[1C00]                      mov	dword [GdtPtr + 2], eax	; [GdtPtr + 2] <- gdt 基地址
    47                                  
    48                                          ; 加载 GDTR
    49 0000005B 0F0116[1A00]                    lgdt	[GdtPtr]
    50                                  
    51                                          ; 关中断
    52 00000060 FA                              cli
    53                                  
    54                                          ; 打开地址线A20
    55 00000061 E492                            in	al, 92h
    56 00000063 0C02                            or	al, 00000010b
    57 00000065 E692                            out	92h, al
    58                                  
    59                                          ; 准备切换到保护模式
    60 00000067 0F20C0                          mov	eax, cr0
    61 0000006A 6683C801                        or	eax, 1
    62 0000006E 0F22C0                          mov	cr0, eax
    63                                  
    64                                          ; 真正进入保护模式
    65 00000071 66EA000000000800                jmp	dword SelectorCode32:0	; 执行这一句会把 SelectorCode32 装入 cs,
    66                                                          ; 并跳转到 Code32Selector:0  处
    67                                      ; END of [SECTION .s16]
    68                                  
    69                                  [bits 32]
    70                                      LABEL_SEG_CODE32:
    71 00000079 66B81000                        mov ax,SelectorVideo
    72 0000007D 8EC0                            mov es,ax               ;使es指向视频选择子
    73                                  
    74 0000007F BF7E070000                      mov	edi, (80 * 11 + 79) * 2	; 屏幕第 11 行, 第 79 列。
    75 00000084 B40C                            mov	ah, 0x0C			; 0000: 黑底    1100: 红字
    76 00000086 B050                            mov	al, 'P'
    77 00000088 26668907                        mov	[es:edi], ax
    78                                  
    79                                          ; 到此停止
    80 0000008C EBFE                            jmp	$
    81                                  
    82                                  SegCode32Len	equ	$ - LABEL_SEG_CODE32
    83                                  
    84 0000008E 00<rep 170h>            times 	510-($-$$)	db	0	; 填充剩下的空间，使生成的二进制代码恰好为512字节
    85 000001FE 55AA                    						dw 	0xaa55				; 结束标志
    86                                  
