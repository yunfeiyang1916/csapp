     1                                  ;保护模式微型内核程序 
     2                                  
     3                                  ;-----------常量-----------------------------------------------------------------------
     4                                  flat_4gb_code_seg_sel  equ  0x0008      ;平坦模型下的4GB代码段选择子 
     5                                  flat_4gb_data_seg_sel  equ  0x0018      ;平坦模型下的4GB数据段选择子 
     6                                  idt_linear_address     equ  0x8001f000  ;中断描述符表的线性基地址 
     7                                  
     8                                  ;----------定义宏--------------------------------------------------------------------
     9                                      %macro alloc_core_linear 0                      ;在内核空间中分配虚拟内存，0个参数
    10                                          mov ebx,[core_tcb+0x06]
    11                                          add dword [core_tcb+0x06],0x1000
    12                                          call flat_4gb_code_seg_sel:alloc_inst_a_page
    13                                      %endmacro
    14                                  
    15                                      %macro alloc_user_linear 0              ;在任务空间中分配虚拟内存 
    16                                          mov ebx,[esi+0x06]
    17                                          add dword [esi+0x06],0x1000
    18                                          call flat_4gb_code_seg_sel:alloc_inst_a_page
    19                                      %endmacro
    20                                  
    21                                  ;-----------代码段-----------------------------------------------------------------------
    22                                  section code vstart=0x80040000
    23                                  ;----------头部数据段--------------------------------------------------------------------
    24                                                                                      ;以下是系统核心的头部，用于加载核心程序 
    25 00000000 [00000000]                  core_length dd core_end                         ;[0x00]内核总长度，双字，32位
    26 00000004 [D3050000]                  core_entry dd start                             ;[0x04]内核代码段入口地址偏移量
    27                                  
    28                                   [bits 32]
    29                                  ;-----------显示字符串--------------------------------------------------------------------      
    30                                      put_string:                             ;显示0终止的字符串并移动光标 
    31                                                                              ;输入：EBX=字符串的线性地址
    32                                  
    33 00000008 53                              push ebx
    34 00000009 51                              push ecx
    35                                  
    36 0000000A FA                              cli                                ;硬件操作期间，关中断。防止并发
    37                                  
    38                                      .getc:
    39 0000000B 8A0B                            mov cl,[ebx]
    40 0000000D 08C9                            or cl,cl                           ;检测串结束标志（0） 
    41 0000000F 7408                            jz .exit                           ;显示完毕，返回 
    42 00000011 E807000000                      call put_char
    43 00000016 43                              inc ebx
    44 00000017 EBF2                            jmp .getc
    45                                  
    46                                      .exit:
    47 00000019 FB                              sti                                ;硬件操作完毕，开放中断
    48                                  
    49 0000001A 59                              pop ecx
    50 0000001B 5B                              pop ebx
    51                                  
    52 0000001C CB                              retf                               ;段间返回
    53                                  
    54                                      put_char:                               ;在当前光标处显示一个字符,并推进
    55                                                                              ;光标。仅用于段内调用 
    56                                                                              ;输入：CL=字符ASCII码 
    57 0000001D 60                              pushad
    58                                  
    59                                          ;以下取当前光标位置
    60 0000001E 66BAD403                        mov dx,0x3d4
    61 00000022 B00E                            mov al,0x0e
    62 00000024 EE                              out dx,al
    63 00000025 6642                            inc dx                             ;0x3d5
    64 00000027 EC                              in al,dx                           ;高字
    65 00000028 88C4                            mov ah,al
    66                                  
    67 0000002A 664A                            dec dx                             ;0x3d4
    68 0000002C B00F                            mov al,0x0f
    69 0000002E EE                              out dx,al
    70 0000002F 6642                            inc dx                             ;0x3d5
    71 00000031 EC                              in al,dx                           ;低字
    72 00000032 6689C3                          mov bx,ax                          ;BX=代表光标位置的16位数
    73 00000035 81E3FFFF0000                    and ebx,0x0000ffff                 ;准备使用32位寻址方式访问显存 
    74                                          
    75 0000003B 80F90D                          cmp cl,0x0d                        ;回车符？
    76 0000003E 750E                            jnz .put_0a                         
    77                                          
    78 00000040 6689D8                          mov ax,bx                          ;以下按回车符处理 
    79 00000043 B350                            mov bl,80
    80 00000045 F6F3                            div bl
    81 00000047 F6E3                            mul bl
    82 00000049 6689C3                          mov bx,ax
    83 0000004C EB4E                            jmp .set_cursor
    84                                  
    85                                      .put_0a:
    86 0000004E 80F90A                          cmp cl,0x0a                        ;换行符？
    87 00000051 7506                            jnz .put_other
    88 00000053 6683C350                        add bx,80                          ;增加一行 
    89 00000057 EB0E                            jmp .roll_screen
    90                                  
    91                                      .put_other:                             ;正常显示字符
    92 00000059 66D1E3                          shl bx,1
    93 0000005C 888B00800B80                    mov [0x800b8000+ebx],cl            ;在光标位置处显示字符 
    94                                  
    95                                          ;以下将光标位置推进一个字符
    96 00000062 66D1EB                          shr bx,1
    97 00000065 6643                            inc bx
    98                                  
    99                                      .roll_screen:
   100 00000067 6681FBD007                      cmp bx,2000                        ;光标超出屏幕？滚屏
   101 0000006C 7C2E                            jl .set_cursor
   102                                  
   103 0000006E FC                              cld
   104 0000006F BEA0800B80                      mov esi,0x800b80a0                 ;小心！32位模式下movsb/w/d 
   105 00000074 BF00800B80                      mov edi,0x800b8000                 ;使用的是esi/edi/ecx 
   106 00000079 B980070000                      mov ecx,1920
   107 0000007E F3A5                            rep movsd
   108 00000080 66BB000F                        mov bx,3840                        ;清除屏幕最底一行
   109 00000084 B950000000                      mov ecx,80                         ;32位程序应该使用ECX
   110                                      .cls:
   111 00000089 66C78300800B802007              mov word [0x800b8000+ebx],0x0720
   112 00000092 6683C302                        add bx,2
   113 00000096 E2F1                            loop .cls
   114                                  
   115 00000098 66BB8007                        mov bx,1920
   116                                  
   117                                      .set_cursor:
   118 0000009C 66BAD403                        mov dx,0x3d4
   119 000000A0 B00E                            mov al,0x0e
   120 000000A2 EE                              out dx,al
   121 000000A3 6642                            inc dx                             ;0x3d5
   122 000000A5 88F8                            mov al,bh
   123 000000A7 EE                              out dx,al
   124 000000A8 664A                            dec dx                             ;0x3d4
   125 000000AA B00F                            mov al,0x0f
   126 000000AC EE                              out dx,al
   127 000000AD 6642                            inc dx                             ;0x3d5
   128 000000AF 88D8                            mov al,bl
   129 000000B1 EE                              out dx,al
   130                                          
   131 000000B2 61                              popad
   132                                          
   133 000000B3 C3                              ret   
   134                                  
   135                                  ;-----------从硬盘读取一个逻辑扇区----------------------------------------------------------------
   136                                      read_hard_disk_0:                           ;从硬盘读取一个逻辑扇区（平坦模型） 
   137                                                                              ;EAX=逻辑扇区号
   138                                                                              ;EBX=目标缓冲区线性地址
   139                                                                              ;返回：EBX=EBX+512
   140 000000B4 FA                              cli
   141                                          
   142 000000B5 50                              push eax 
   143 000000B6 51                              push ecx
   144 000000B7 52                              push edx
   145                                      
   146 000000B8 50                              push eax
   147                                          
   148 000000B9 66BAF201                        mov dx,0x1f2
   149 000000BD B001                            mov al,1
   150 000000BF EE                              out dx,al                          ;读取的扇区数
   151                                  
   152 000000C0 6642                            inc dx                             ;0x1f3
   153 000000C2 58                              pop eax
   154 000000C3 EE                              out dx,al                          ;LBA地址7~0
   155                                  
   156 000000C4 6642                            inc dx                             ;0x1f4
   157 000000C6 B108                            mov cl,8
   158 000000C8 D3E8                            shr eax,cl
   159 000000CA EE                              out dx,al                          ;LBA地址15~8
   160                                  
   161 000000CB 6642                            inc dx                             ;0x1f5
   162 000000CD D3E8                            shr eax,cl
   163 000000CF EE                              out dx,al                          ;LBA地址23~16
   164                                  
   165 000000D0 6642                            inc dx                             ;0x1f6
   166 000000D2 D3E8                            shr eax,cl
   167 000000D4 0CE0                            or al,0xe0                         ;第一硬盘  LBA地址27~24
   168 000000D6 EE                              out dx,al
   169                                  
   170 000000D7 6642                            inc dx                             ;0x1f7
   171 000000D9 B020                            mov al,0x20                        ;读命令
   172 000000DB EE                              out dx,al
   173                                  
   174                                      .waits:
   175 000000DC EC                              in al,dx
   176 000000DD 2488                            and al,0x88
   177 000000DF 3C08                            cmp al,0x08
   178 000000E1 75F9                            jnz .waits                         ;不忙，且硬盘已准备好数据传输 
   179                                  
   180 000000E3 B900010000                      mov ecx,256                        ;总共要读取的字数
   181 000000E8 66BAF001                        mov dx,0x1f0
   182                                      .readw:
   183 000000EC 66ED                            in ax,dx
   184 000000EE 668903                          mov [ebx],ax
   185 000000F1 83C302                          add ebx,2
   186 000000F4 E2F6                            loop .readw
   187                                  
   188 000000F6 5A                              pop edx
   189 000000F7 59                              pop ecx
   190 000000F8 58                              pop eax
   191                                      
   192 000000F9 FB                              sti
   193                                      
   194 000000FA CB                              retf                               ;远返回 
   195                                  
   196                                  ;-----------输出调试信息-----------------------------------------------------------------------
   197                                      ;汇编语言程序是极难一次成功，而且调试非常困难。这个例程可以提供帮助 
   198                                      put_hex_dword:                              ;在当前光标处以十六进制形式显示
   199                                                                              ;一个双字并推进光标 
   200                                                                              ;输入：EDX=要转换并显示的数字
   201                                                                              ;输出：无
   202 000000FB 60                              pushad
   203                                  
   204 000000FC BB[E50D0000]                    mov ebx,bin_hex                    ;指向核心地址空间内的转换表
   205 00000101 B908000000                      mov ecx,8
   206                                      .xlt:    
   207 00000106 C1C204                          rol edx,4
   208 00000109 89D0                            mov eax,edx
   209 0000010B 83E00F                          and eax,0x0000000f
   210 0000010E D7                              xlat
   211                                      
   212 0000010F 51                              push ecx
   213 00000110 88C1                            mov cl,al                           
   214 00000112 E806FFFFFF                      call put_char
   215 00000117 59                              pop ecx
   216                                      
   217 00000118 E2EC                            loop .xlt
   218                                      
   219 0000011A 61                              popad
   220 0000011B CB                              retf
   221                                  
   222                                  ;-----------在GDT内安装一个新的描述符--------------------------------------------------------------------
   223                                      set_up_gdt_descriptor:             ;输入edx:eax=描述符，输出cx=描述符选择子
   224 0000011C 50                              push eax
   225 0000011D 53                              push ebx
   226 0000011E 52                              push edx
   227                                  
   228 0000011F 0F0105[67080000]                sgdt [pgdt]                        ;取得GDTR的界限和线性地址 
   229                                  
   230 00000126 0FB71D[67080000]                movzx ebx,word [pgdt]              ;GDT界限
   231 0000012D 6643                            inc bx                             ;GDT总字节数，也是下一个描述符偏移
   232 0000012F 031D[69080000]                  add ebx,[pgdt+2]                   ;下一个描述符的线性地址
   233                                  
   234 00000135 8903                            mov [ebx],eax
   235 00000137 895304                          mov [ebx+4],edx
   236                                  
   237 0000013A 668305[67080000]08              add word [pgdt],8                  ;增加一个描述符的大小
   238                                  
   239 00000142 0F0115[67080000]                lgdt [pgdt]                        ;对GDT的更改生效
   240                                  
   241 00000149 66A1[67080000]                  mov ax,[pgdt]                      ;得到GDT界限值
   242 0000014F 6631D2                          xor dx,dx
   243 00000152 66BB0800                        mov bx,8
   244 00000156 66F7F3                          div bx                             ;除以8，去掉余数
   245 00000159 6689C1                          mov cx,ax
   246 0000015C 66C1E103                        shl cx,3                           ;将索引号移到正确位置
   247                                  
   248 00000160 5A                              pop edx
   249 00000161 5B                              pop ebx
   250 00000162 58                              pop eax
   251                                  
   252 00000163 CB                              retf   
   253                                  
   254                                  ;-----------构造描述符--------------------------------------------------------------------
   255                                      make_seg_descriptor:            ;输入：eax=线性基址，ebx=段界限,ecx=属性（各属性位都在原始位置，其它没用到的位置0） 
   256                                                                      ;输出edx:eax=完整的描述符
   257 00000164 89C2                            mov edx,eax
   258 00000166 C1E010                          shl eax,16                  ;描述符低32位中的高16位是基地址部分，所以左移16位使其基地址部分就位
   259 00000169 6609D8                          or ax,bx                    ;低16位是段界限，取的段界限
   260                                  
   261 0000016C 81E20000FFFF                    and edx,0xffff0000          ;清除低16位
   262 00000172 C1C208                          rol edx,8                   ;edx循环左移8位，循环左移会将左移出的位放到右边。这样edx中低8位的值就是原先高8位的值
   263 00000175 0FCA                            bswap edx                   ;字节交换指令。装配基址的31~24和23~16  (80486+)
   264                                  
   265 00000177 6631DB                          xor bx,bx
   266 0000017A 09DA                            or edx,ebx                  ;装配段界限的高4位
   267                                          
   268 0000017C 09CA                            or edx,ecx                  ;装配段属性
   269                                  
   270 0000017E CB                              retf
   271                                  
   272                                  ;-----------构造门的描述符（调用门等）--------------------------------------------------------------------
   273                                      make_gate_descriptor:           ;输入：eax=门代码在段内的偏移地址，bx=门代码的段选择子，cx=门属性
   274                                                                      ;输出：edx:eax=完整的描述符
   275 0000017F 53                              push ebx
   276 00000180 51                              push ecx
   277                                  
   278 00000181 89C2                            mov edx,eax
   279 00000183 81E20000FFFF                    and edx,0xffff0000          ;得到偏移地址高16位 
   280 00000189 6609CA                          or  dx,cx                   ;组装属性部分到edx
   281                                  
   282 0000018C 25FFFF0000                      and eax,0x0000ffff          ;得到偏移地址低16位
   283 00000191 C1E310                          shl ebx,16                  ;左移16位使段选择子位于它的高16位        
   284 00000194 09D8                            or eax,ebx                  ;组装段选择子部分
   285                                      
   286 00000196 59                              pop ecx
   287 00000197 5B                              pop ebx
   288                                      
   289 00000198 CB                              retf   
   290                                  
   291                                  ;-----------分配一个4kb的页-----------------------------------------------------------------------
   292                                      allocate_a_4k_page:
   293                                                                      ;输入：无。输出：eax=页的物理地址
   294 00000199 53                              push ebx
   295 0000019A 51                              push ecx
   296 0000019B 52                              push edx
   297                                  
   298 0000019C 31C0                            xor eax,eax
   299                                      .b1:
   300 0000019E 0FAB05[97080000]                bts [page_bit_map],eax
   301 000001A5 7315                            jnc .b2
   302 000001A7 40                              inc eax
   303 000001A8 3D00020000                      cmp eax,page_map_len*8
   304 000001AD 7CEF                            jl .b1
   305                                          
   306 000001AF BB[A90D0000]                    mov ebx,message_3
   307 000001B4 9A[08000000]0800                call flat_4gb_code_seg_sel:put_string
   308 000001BB F4                              hlt                                ;没有可以分配的页，停机 
   309                                           
   310                                      .b2:
   311 000001BC C1E00C                          shl eax,12                         ;乘以4096（0x1000） 
   312                                          
   313 000001BF 5A                              pop edx
   314 000001C0 59                              pop ecx
   315 000001C1 5B                              pop ebx
   316                                          
   317 000001C2 C3                              ret
   318                                  
   319                                  ;-----------分配一个页并安装-----------------------------------------------------------------------
   320                                      alloc_inst_a_page:                      ;分配一个页，并安装在当前活动的
   321                                                                              ;层级分页结构中
   322                                                                              ;输入：EBX=页的线性地址
   323 000001C3 50                              push eax
   324 000001C4 53                              push ebx
   325 000001C5 56                              push esi
   326                                          
   327                                          ;检查该线性地址所对应的页表是否存在
   328 000001C6 89DE                            mov esi,ebx
   329 000001C8 81E60000C0FF                    and esi,0xffc00000
   330 000001CE C1EE14                          shr esi,20                         ;得到页目录索引，并乘以4 
   331 000001D1 81CE00F0FFFF                    or esi,0xfffff000                  ;页目录自身的线性地址+表内偏移 
   332                                  
   333 000001D7 F70601000000                    test dword [esi],0x00000001        ;P位是否为“1”。检查该线性地址是 
   334 000001DD 750A                            jnz .b1                            ;否已经有对应的页表
   335                                          
   336                                          ;创建该线性地址所对应的页表 
   337 000001DF E8B5FFFFFF                      call allocate_a_4k_page            ;分配一个页做为页表 
   338 000001E4 83C807                          or eax,0x00000007
   339 000001E7 8906                            mov [esi],eax                      ;在页目录中登记该页表
   340                                            
   341                                      .b1:
   342                                          ;开始访问该线性地址所对应的页表 
   343 000001E9 89DE                            mov esi,ebx
   344 000001EB C1EE0A                          shr esi,10
   345 000001EE 81E600F03F00                    and esi,0x003ff000                 ;或者0xfffff000，因高10位是零 
   346 000001F4 81CE0000C0FF                    or esi,0xffc00000                  ;得到该页表的线性地址
   347                                          
   348                                          ;得到该线性地址在页表内的对应条目（页表项） 
   349 000001FA 81E300F03F00                    and ebx,0x003ff000
   350 00000200 C1EB0A                          shr ebx,10                         ;相当于右移12位，再乘以4
   351 00000203 09DE                            or esi,ebx                         ;页表项的线性地址 
   352 00000205 E88FFFFFFF                      call allocate_a_4k_page            ;分配一个页，这才是要安装的页
   353 0000020A 83C807                          or eax,0x00000007
   354 0000020D 8906                            mov [esi],eax 
   355                                          
   356 0000020F 5E                              pop esi
   357 00000210 5B                              pop ebx
   358 00000211 58                              pop eax
   359                                          
   360 00000212 CB                              retf  
   361                                  
   362                                  ;-----------创建新的内存页目录-----------------------------------------------------------------------
   363                                      create_copy_cur_pdir:               ;创建新页目录，并复制当前页目录内容
   364                                                                          ;输入：无
   365                                                                          ;输出：EAX=新页目录的物理地址 
   366 00000213 56                              push esi
   367 00000214 57                              push edi
   368 00000215 53                              push ebx
   369 00000216 51                              push ecx
   370                                          
   371 00000217 E87DFFFFFF                      call allocate_a_4k_page            
   372 0000021C 89C3                            mov ebx,eax
   373 0000021E 83CB07                          or ebx,0x00000007
   374 00000221 891DF8FFFFFF                    mov [0xfffffff8],ebx
   375                                  
   376 00000227 0F013DF8FFFFFF                  invlpg [0xfffffff8]
   377                                  
   378 0000022E BE00F0FFFF                      mov esi,0xfffff000                 ;ESI->当前页目录的线性地址
   379 00000233 BF00E0FFFF                      mov edi,0xffffe000                 ;EDI->新页目录的线性地址
   380 00000238 B900040000                      mov ecx,1024                       ;ECX=要复制的目录项数
   381 0000023D FC                              cld
   382 0000023E F3A5                            repe movsd 
   383                                          
   384 00000240 59                              pop ecx
   385 00000241 5B                              pop ebx
   386 00000242 5F                              pop edi
   387 00000243 5E                              pop esi
   388                                          
   389 00000244 CB                              retf
   390                                  
   391                                  ;-----------通用的中断处理过程--------------------------------------------------------------------
   392                                      general_interrupt_handler:                  
   393 00000245 50                              push eax
   394                                          
   395 00000246 B020                            mov al,0x20                        ;中断结束命令EOI 
   396 00000248 E6A0                            out 0xa0,al                        ;向从片发送 
   397 0000024A E620                            out 0x20,al                        ;向主片发送
   398                                          
   399 0000024C 58                              pop eax
   400                                          
   401 0000024D CF                              iretd
   402                                  
   403                                  ;-----------通用的异常处理过程--------------------------------------------------------------------
   404                                      general_exception_handler:
   405 0000024E BB[EF0C0000]                    mov ebx,excep_msg
   406 00000253 9A[08000000]0800                call flat_4gb_code_seg_sel:put_string       ;因为put_string还需要提供给用户程序调用，代码返回使用的是retf，所以这里也需要使用远程调用
   407                                  
   408 0000025A F4                              hlt
   409                                  
   410                                  ;-----------实时时钟中断处理过程--------------------------------------------------------------------
   411                                      rtm_0x70_interrupt_handle:                  
   412                                  
   413 0000025B 60                              pushad
   414                                  
   415 0000025C B020                            mov al,0x20                        ;中断结束命令EOI
   416 0000025E E6A0                            out 0xa0,al                        ;向8259A从片发送
   417 00000260 E620                            out 0x20,al                        ;向8259A主片发送
   418                                  
   419 00000262 B00C                            mov al,0x0c                        ;寄存器C的索引。且开放NMI
   420 00000264 E670                            out 0x70,al
   421 00000266 E471                            in al,0x71                         ;读一下RTC的寄存器C，否则只发生一次中断
   422                                                                          ;此处不考虑闹钟和周期性中断的情况
   423                                          ;找当前任务（状态为忙的任务）在链表中的位置
   424 00000268 B8[73080000]                    mov eax,tcb_chain                  
   425                                      .b0:                                   ;EAX=链表头或当前TCB线性地址
   426 0000026D 8B18                            mov ebx,[eax]                      ;EBX=下一个TCB线性地址
   427 0000026F 09DB                            or ebx,ebx
   428 00000271 743E                            jz .irtn                           ;链表为空，或已到末尾，从中断返回
   429 00000273 66837B04FF                      cmp word [ebx+0x04],0xffff         ;是忙任务（当前任务）？
   430 00000278 7404                            je .b1
   431 0000027A 89D8                            mov eax,ebx                        ;定位到下一个TCB（的线性地址）
   432 0000027C EBEF                            jmp .b0         
   433                                  
   434                                           ;将当前为忙的任务移到链尾
   435                                      .b1:
   436 0000027E 8B0B                             mov ecx,[ebx]                      ;下游TCB的线性地址
   437 00000280 8908                             mov [eax],ecx                      ;将当前任务从链中拆除
   438                                  
   439                                      .b2:                                    ;此时，EBX=当前任务的线性地址
   440 00000282 8B10                             mov edx,[eax]
   441 00000284 09D2                             or edx,edx                         ;已到链表尾端？
   442 00000286 7404                             jz .b3
   443 00000288 89D0                             mov eax,edx
   444 0000028A EBF6                             jmp .b2
   445                                  
   446                                      .b3:
   447 0000028C 8918                             mov [eax],ebx                      ;将忙任务的TCB挂在链表尾端
   448 0000028E C70300000000                     mov dword [ebx],0x00000000         ;将忙任务的TCB标记为链尾
   449                                  
   450                                           ;从链首搜索第一个空闲任务
   451 00000294 B8[73080000]                     mov eax,tcb_chain
   452                                      .b4:
   453 00000299 8B00                            mov eax,[eax]
   454 0000029B 09C0                            or eax,eax                         ;已到链尾（未发现空闲任务）
   455 0000029D 7412                            jz .irtn                           ;未发现空闲任务，从中断返回
   456 0000029F 6683780400                      cmp word [eax+0x04],0x0000         ;是空闲任务？
   457 000002A4 75F3                            jnz .b4
   458                                  
   459                                          ;将空闲任务和当前任务的状态都取反
   460 000002A6 66F75004                        not word [eax+0x04]                ;设置空闲任务的状态为忙
   461 000002AA 66F75304                        not word [ebx+0x04]                ;设置当前任务（忙）的状态为空闲
   462 000002AE FF6814                          jmp far [eax+0x14]                 ;任务转换
   463                                  
   464                                      .irtn:
   465 000002B1 61                              popad
   466                                  
   467 000002B2 CF                              iretd
   468                                  
   469                                  ;-----------终止当前任务--------------------------------------------------------------------
   470                                      terminate_current_task:
   471                                                                             ;注意，执行此例程时，当前任务仍在运行中。此例程其实也是当前任务的一部分
   472                                          ;找当前任务（状态为忙的任务）在链表中的位置
   473 000002B3 B8[73080000]                    mov eax,tcb_chain
   474                                      .b0:                                      ;EAX=链表头或当前TCB线性地址
   475 000002B8 8B18                            mov ebx,[eax]                      ;EBX=下一个TCB线性地址
   476 000002BA 66837B04FF                      cmp word [ebx+0x04],0xffff         ;是忙任务（当前任务）？
   477 000002BF 7404                            je .b1
   478 000002C1 89D8                            mov eax,ebx                        ;定位到下一个TCB（的线性地址）
   479 000002C3 EBF3                            jmp .b0
   480                                           
   481                                      .b1:
   482 000002C5 66C743043333                    mov word [ebx+0x04],0x3333         ;修改当前任务的状态为“退出”
   483                                           
   484                                      .b2:
   485 000002CB F4                              hlt                                ;停机，等待程序管理器恢复运行时，
   486                                                                          ;将其回收 
   487 000002CC EBFD                            jmp .b2 
   488                                  
   489                                  ;-----------在LDT内安装一个新的描述符-----------------------------------------------------------------------
   490                                      fill_descriptor_in_ldt:                 ;在LDT内安装一个新的描述符
   491                                                                              ;输入：EDX:EAX=描述符
   492                                                                              ;          EBX=TCB基地址
   493                                                                              ;输出：CX=描述符的选择子
   494 000002CE 50                              push eax
   495 000002CF 52                              push edx
   496 000002D0 57                              push edi
   497                                  
   498 000002D1 8B7B0C                          mov edi,[ebx+0x0c]                 ;获得LDT基地址
   499                                          
   500 000002D4 31C9                            xor ecx,ecx
   501 000002D6 668B4B0A                        mov cx,[ebx+0x0a]                  ;获得LDT界限
   502 000002DA 6641                            inc cx                             ;LDT的总字节数，即新描述符偏移地址
   503                                          
   504 000002DC 89040F                          mov [edi+ecx+0x00],eax
   505 000002DF 89540F04                        mov [edi+ecx+0x04],edx             ;安装描述符
   506                                  
   507 000002E3 6683C108                        add cx,8                           
   508 000002E7 6649                            dec cx                             ;得到新的LDT界限值 
   509                                  
   510 000002E9 66894B0A                        mov [ebx+0x0a],cx                  ;更新LDT界限值到TCB
   511                                  
   512 000002ED 6689C8                          mov ax,cx
   513 000002F0 6631D2                          xor dx,dx
   514 000002F3 66B90800                        mov cx,8
   515 000002F7 66F7F1                          div cx
   516                                          
   517 000002FA 6689C1                          mov cx,ax
   518 000002FD 66C1E103                        shl cx,3                           ;左移3位，并且
   519 00000301 6683C904                        or cx,0000_0000_0000_0100B         ;使TI位=1，指向LDT，最后使RPL=00 
   520                                  
   521 00000305 5F                              pop edi
   522 00000306 5A                              pop edx
   523 00000307 58                              pop eax
   524                                      
   525 00000308 C3                              ret
   526                                  
   527                                  ;-----------加载并重定位用户程序-----------------------------------------------------------------------
   528                                      load_relocate_program:              ;输入push:逻辑扇区号，push:任务控制块起始地址
   529                                                                          ;调用该函数时会先压入EIP
   530 00000309 60                              pushad                          ;依次压入：EAX,ECX,EDX,EBX,ESP(初始值)，EBP,ESI,EDI,共8个寄存器
   531                                  
   532 0000030A 89E5                            mov ebp,esp                     ;使栈基址寄存器指向初始栈地址
   533                                  
   534                                          ;清空当前页目录的前半部分（对应低2GB的局部地址空间）
   535 0000030C BB00F0FFFF                      mov ebx,0xfffff000              ;页目录表的线性地址
   536 00000311 31F6                            xor esi,esi
   537                                      .b1:
   538 00000313 C704B300000000                  mov dword [ebx+esi*4],0x00000000
   539 0000031A 46                              inc esi
   540 0000031B 81FE00020000                    cmp esi,512                     ;前512页目录项全置为0
   541 00000321 7CF0                            jl .b1
   542                                  
   543 00000323 0F20D8                          mov eax,cr3
   544 00000326 0F22D8                          mov cr3,eax                     ;读一次cr3在原样写回去，用于刷新TLB（旁路缓存，会缓存页表）
   545                                  
   546                                          ;以下开始分配内存并加载用户程序
   547 00000329 8B4528                          mov eax,[ebp+40]                   ;从堆栈中取出用户程序起始扇区号
   548 0000032C BB[F50D0000]                    mov ebx,core_buf                   ;读取程序头部数据
   549 00000331 9A[B4000000]0800                call flat_4gb_code_seg_sel:read_hard_disk_0
   550                                  
   551                                          ;以下判断整个程序有多大
   552 00000338 A1[F50D0000]                    mov eax,[core_buf]                 ;程序尺寸
   553 0000033D 89C3                            mov ebx,eax
   554 0000033F 81E300F0FFFF                    and ebx,0xfffff000                 ;使之4KB对齐 
   555 00000345 81C300100000                    add ebx,0x1000                        
   556 0000034B A9FF0F0000                      test eax,0x00000fff                ;程序的大小正好是4KB的倍数吗? 
   557 00000350 0F45C3                          cmovnz eax,ebx                     ;不是。使用凑整的结果
   558                                  
   559 00000353 89C1                            mov ecx,eax
   560 00000355 C1E90C                          shr ecx,12                         ;程序占用的总4KB页数 
   561                                          
   562 00000358 8B4528                          mov eax,[ebp+40]                   ;起始扇区号
   563 0000035B 8B7524                          mov esi,[ebp+36]                   ;从堆栈中取得TCB的基地址 
   564                                  
   565                                      .b2:
   566                                          alloc_user_linear                  ;宏：在用户任务地址空间上分配内存 
    16 0000035E 8B5E06              <1>  mov ebx,[esi+0x06]
    17 00000361 81460600100000      <1>  add dword [esi+0x06],0x1000
    18 00000368 9A[C3010000]0800    <1>  call flat_4gb_code_seg_sel:alloc_inst_a_page
   567                                          
   568 0000036F 51                              push ecx
   569 00000370 B908000000                      mov ecx,8
   570                                  
   571                                      .b3:
   572 00000375 9A[B4000000]0800                call flat_4gb_code_seg_sel:read_hard_disk_0               
   573 0000037C 40                              inc eax
   574 0000037D E2F6                            loop .b3
   575                                  
   576 0000037F 59                              pop ecx
   577 00000380 E2DC                            loop .b2
   578                                  
   579                                          ;在内核地址空间内创建用户任务的TSS
   580                                          alloc_core_linear                  ;宏：在内核的地址空间上分配内存
    10 00000382 8B1D[7D080000]      <1>  mov ebx,[core_tcb+0x06]
    11 00000388 8105[7D080000]0010- <1>  add dword [core_tcb+0x06],0x1000
    11 00000390 0000                <1>
    12 00000392 9A[C3010000]0800    <1>  call flat_4gb_code_seg_sel:alloc_inst_a_page
   581                                                                          ;用户任务的TSS必须在全局空间上分配 
   582                                          
   583 00000399 895E14                          mov [esi+0x14],ebx                 ;在TCB中填写TSS的线性地址 
   584 0000039C 66C746126700                    mov word [esi+0x12],103            ;在TCB中填写TSS的界限值 
   585                                          
   586                                          ;在用户任务的局部地址空间内创建LDT 
   587                                          alloc_user_linear                  ;宏：在用户任务地址空间上分配内存
    16 000003A2 8B5E06              <1>  mov ebx,[esi+0x06]
    17 000003A5 81460600100000      <1>  add dword [esi+0x06],0x1000
    18 000003AC 9A[C3010000]0800    <1>  call flat_4gb_code_seg_sel:alloc_inst_a_page
   588                                  
   589 000003B3 895E0C                          mov [esi+0x0c],ebx                 ;填写LDT线性地址到TCB中 
   590                                  
   591                                          ;建立程序代码段描述符
   592 000003B6 B800000000                      mov eax,0x00000000
   593 000003BB BBFFFF0F00                      mov ebx,0x000fffff                 
   594 000003C0 B900F8C000                      mov ecx,0x00c0f800                 ;4KB粒度的代码段描述符，特权级3
   595 000003C5 9A[64010000]0800                call flat_4gb_code_seg_sel:make_seg_descriptor
   596 000003CC 89F3                            mov ebx,esi                        ;TCB的基地址
   597 000003CE E8FBFEFFFF                      call fill_descriptor_in_ldt
   598 000003D3 6683C903                        or cx,0000_0000_0000_0011B         ;设置选择子的特权级为3
   599                                          
   600 000003D7 8B5E14                          mov ebx,[esi+0x14]                 ;从TCB中获取TSS的线性地址
   601 000003DA 66894B4C                        mov [ebx+76],cx                    ;填写TSS的CS域 
   602                                  
   603                                          ;建立程序数据段描述符
   604 000003DE B800000000                      mov eax,0x00000000
   605 000003E3 BBFFFF0F00                      mov ebx,0x000fffff                 
   606 000003E8 B900F2C000                      mov ecx,0x00c0f200                 ;4KB粒度的数据段描述符，特权级3
   607 000003ED 9A[64010000]0800                call flat_4gb_code_seg_sel:make_seg_descriptor
   608 000003F4 89F3                            mov ebx,esi                        ;TCB的基地址
   609 000003F6 E8D3FEFFFF                      call fill_descriptor_in_ldt
   610 000003FB 6683C903                        or cx,0000_0000_0000_0011B         ;设置选择子的特权级为3
   611                                          
   612 000003FF 8B5E14                          mov ebx,[esi+0x14]                 ;从TCB中获取TSS的线性地址
   613 00000402 66894B54                        mov [ebx+84],cx                    ;填写TSS的DS域 
   614 00000406 66894B48                        mov [ebx+72],cx                    ;填写TSS的ES域
   615 0000040A 66894B58                        mov [ebx+88],cx                    ;填写TSS的FS域
   616 0000040E 66894B5C                        mov [ebx+92],cx                    ;填写TSS的GS域
   617                                          
   618                                          ;将数据段作为用户任务的3特权级固有堆栈 
   619                                          alloc_user_linear                  ;宏：在用户任务地址空间上分配内存
    16 00000412 8B5E06              <1>  mov ebx,[esi+0x06]
    17 00000415 81460600100000      <1>  add dword [esi+0x06],0x1000
    18 0000041C 9A[C3010000]0800    <1>  call flat_4gb_code_seg_sel:alloc_inst_a_page
   620                                          
   621 00000423 8B5E14                          mov ebx,[esi+0x14]                 ;从TCB中获取TSS的线性地址
   622 00000426 66894B50                        mov [ebx+80],cx                    ;填写TSS的SS域
   623 0000042A 8B5606                          mov edx,[esi+0x06]                 ;堆栈的高端线性地址 
   624 0000042D 895338                          mov [ebx+56],edx                   ;填写TSS的ESP域 
   625                                  
   626                                          ;在用户任务的局部地址空间内创建0特权级堆栈
   627                                          alloc_user_linear                  ;宏：在用户任务地址空间上分配内存
    16 00000430 8B5E06              <1>  mov ebx,[esi+0x06]
    17 00000433 81460600100000      <1>  add dword [esi+0x06],0x1000
    18 0000043A 9A[C3010000]0800    <1>  call flat_4gb_code_seg_sel:alloc_inst_a_page
   628                                  
   629 00000441 B800000000                      mov eax,0x00000000
   630 00000446 BBFFFF0F00                      mov ebx,0x000fffff
   631 0000044B B90092C000                      mov ecx,0x00c09200                 ;4KB粒度的堆栈段描述符，特权级0
   632 00000450 9A[64010000]0800                call flat_4gb_code_seg_sel:make_seg_descriptor
   633 00000457 89F3                            mov ebx,esi                        ;TCB的基地址
   634 00000459 E870FEFFFF                      call fill_descriptor_in_ldt
   635 0000045E 6683C900                        or cx,0000_0000_0000_0000B         ;设置选择子的特权级为0
   636                                  
   637 00000462 8B5E14                          mov ebx,[esi+0x14]                 ;从TCB中获取TSS的线性地址
   638 00000465 66894B08                        mov [ebx+8],cx                     ;填写TSS的SS0域
   639 00000469 8B5606                          mov edx,[esi+0x06]                 ;堆栈的高端线性地址
   640 0000046C 895304                          mov [ebx+4],edx                    ;填写TSS的ESP0域 
   641                                  
   642                                          ;在用户任务的局部地址空间内创建1特权级堆栈
   643                                          alloc_user_linear                  ;宏：在用户任务地址空间上分配内存
    16 0000046F 8B5E06              <1>  mov ebx,[esi+0x06]
    17 00000472 81460600100000      <1>  add dword [esi+0x06],0x1000
    18 00000479 9A[C3010000]0800    <1>  call flat_4gb_code_seg_sel:alloc_inst_a_page
   644                                  
   645 00000480 B800000000                      mov eax,0x00000000
   646 00000485 BBFFFF0F00                      mov ebx,0x000fffff
   647 0000048A B900B2C000                      mov ecx,0x00c0b200                 ;4KB粒度的堆栈段描述符，特权级1
   648 0000048F 9A[64010000]0800                call flat_4gb_code_seg_sel:make_seg_descriptor
   649 00000496 89F3                            mov ebx,esi                        ;TCB的基地址
   650 00000498 E831FEFFFF                      call fill_descriptor_in_ldt
   651 0000049D 6683C901                        or cx,0000_0000_0000_0001B         ;设置选择子的特权级为1
   652                                  
   653 000004A1 8B5E14                          mov ebx,[esi+0x14]                 ;从TCB中获取TSS的线性地址
   654 000004A4 66894B10                        mov [ebx+16],cx                    ;填写TSS的SS1域
   655 000004A8 8B5606                          mov edx,[esi+0x06]                 ;堆栈的高端线性地址
   656 000004AB 89530C                          mov [ebx+12],edx                   ;填写TSS的ESP1域 
   657                                  
   658                                          ;在用户任务的局部地址空间内创建2特权级堆栈
   659                                          alloc_user_linear                  ;宏：在用户任务地址空间上分配内存
    16 000004AE 8B5E06              <1>  mov ebx,[esi+0x06]
    17 000004B1 81460600100000      <1>  add dword [esi+0x06],0x1000
    18 000004B8 9A[C3010000]0800    <1>  call flat_4gb_code_seg_sel:alloc_inst_a_page
   660                                  
   661 000004BF B800000000                      mov eax,0x00000000
   662 000004C4 BBFFFF0F00                      mov ebx,0x000fffff
   663 000004C9 B900D2C000                      mov ecx,0x00c0d200                 ;4KB粒度的堆栈段描述符，特权级2
   664 000004CE 9A[64010000]0800                call flat_4gb_code_seg_sel:make_seg_descriptor
   665 000004D5 89F3                            mov ebx,esi                        ;TCB的基地址
   666 000004D7 E8F2FDFFFF                      call fill_descriptor_in_ldt
   667 000004DC 6683C902                        or cx,0000_0000_0000_0010B         ;设置选择子的特权级为2
   668                                  
   669 000004E0 8B5E14                          mov ebx,[esi+0x14]                 ;从TCB中获取TSS的线性地址
   670 000004E3 66894B18                        mov [ebx+24],cx                    ;填写TSS的SS2域
   671 000004E7 8B5606                          mov edx,[esi+0x06]                 ;堆栈的高端线性地址
   672 000004EA 895314                          mov [ebx+20],edx                   ;填写TSS的ESP2域 
   673                                  
   674                                          ;重定位U-SALT 
   675 000004ED FC                              cld
   676                                  
   677 000004EE 8B0D0C000000                    mov ecx,[0x0c]                     ;U-SALT条目数 
   678 000004F4 8B3D08000000                    mov edi,[0x08]                     ;U-SALT在4GB空间内的偏移 
   679                                      .b4:
   680 000004FA 51                              push ecx
   681 000004FB 57                              push edi
   682                                      
   683 000004FC B904000000                      mov ecx,salt_items
   684 00000501 BE[D7080000]                    mov esi,salt
   685                                      .b5:
   686 00000506 57                              push edi
   687 00000507 56                              push esi
   688 00000508 51                              push ecx
   689                                  
   690 00000509 B940000000                      mov ecx,64                         ;检索表中，每条目的比较次数 
   691 0000050E F3A7                            repe cmpsd                         ;每次比较4字节 
   692 00000510 7517                            jnz .b6
   693 00000512 8B06                            mov eax,[esi]                      ;若匹配，则esi恰好指向其后的地址
   694 00000514 898700FFFFFF                    mov [edi-256],eax                  ;将字符串改写成偏移地址 
   695 0000051A 668B4604                        mov ax,[esi+4]
   696 0000051E 6683C803                        or ax,0000000000000011B            ;以用户程序自己的特权级使用调用门
   697                                                                          ;故RPL=3 
   698 00000522 66898704FFFFFF                  mov [edi-252],ax                   ;回填调用门选择子 
   699                                      .b6:
   700                                        
   701 00000529 59                              pop ecx
   702 0000052A 5E                              pop esi
   703 0000052B 81C606010000                    add esi,salt_item_len
   704 00000531 5F                              pop edi                            ;从头比较 
   705 00000532 E2D2                            loop .b5
   706                                      
   707 00000534 5F                              pop edi
   708 00000535 81C700010000                    add edi,256
   709 0000053B 59                              pop ecx
   710 0000053C E2BC                            loop .b4
   711                                  
   712                                          ;在GDT中登记LDT描述符
   713 0000053E 8B7524                          mov esi,[ebp+36]                   ;从堆栈中取得TCB的基地址
   714 00000541 8B460C                          mov eax,[esi+0x0c]                 ;LDT的起始线性地址
   715 00000544 0FB75E0A                        movzx ebx,word [esi+0x0a]          ;LDT段界限
   716 00000548 B900824000                      mov ecx,0x00408200                 ;LDT描述符，特权级0
   717 0000054D 9A[64010000]0800                call flat_4gb_code_seg_sel:make_seg_descriptor
   718 00000554 9A[1C010000]0800                call flat_4gb_code_seg_sel:set_up_gdt_descriptor
   719 0000055B 66894E10                        mov [esi+0x10],cx                  ;登记LDT选择子到TCB中
   720                                  
   721 0000055F 8B5E14                          mov ebx,[esi+0x14]                 ;从TCB中获取TSS的线性地址
   722 00000562 66894B60                        mov [ebx+96],cx                    ;填写TSS的LDT域 
   723                                  
   724 00000566 66C7030000                      mov word [ebx+0],0                 ;反向链=0
   725                                      
   726 0000056B 668B5612                        mov dx,[esi+0x12]                  ;段长度（界限）
   727 0000056F 66895366                        mov [ebx+102],dx                   ;填写TSS的I/O位图偏移域 
   728                                      
   729 00000573 66C743640000                    mov word [ebx+100],0               ;T=0
   730                                      
   731 00000579 A104000000                      mov eax,[0x04]                     ;从任务的4GB地址空间获取入口点 
   732 0000057E 894320                          mov [ebx+32],eax                   ;填写TSS的EIP域 
   733                                  
   734 00000581 9C                              pushfd
   735 00000582 5A                              pop edx
   736 00000583 895324                          mov [ebx+36],edx                   ;填写TSS的EFLAGS域 
   737                                  
   738                                          ;在GDT中登记TSS描述符
   739 00000586 8B4614                          mov eax,[esi+0x14]                 ;从TCB中获取TSS的起始线性地址
   740 00000589 0FB75E12                        movzx ebx,word [esi+0x12]          ;段长度（界限）
   741 0000058D B900894000                      mov ecx,0x00408900                 ;TSS描述符，特权级0
   742 00000592 9A[64010000]0800                call flat_4gb_code_seg_sel:make_seg_descriptor
   743 00000599 9A[1C010000]0800                call flat_4gb_code_seg_sel:set_up_gdt_descriptor
   744 000005A0 66894E18                        mov [esi+0x18],cx                  ;登记TSS选择子到TCB
   745                                  
   746                                          ;创建用户任务的页目录
   747                                          ;注意！页的分配和使用是由页位图决定的，可以不占用线性地址空间 
   748 000005A4 9A[13020000]0800                call flat_4gb_code_seg_sel:create_copy_cur_pdir
   749 000005AB 8B5E14                          mov ebx,[esi+0x14]                 ;从TCB中获取TSS的线性地址
   750 000005AE 89431C                          mov dword [ebx+28],eax             ;填写TSS的CR3(PDBR)域
   751                                                  
   752 000005B1 61                              popad
   753                                      
   754 000005B2 C20800                          ret 8                              ;丢弃调用本过程前压入的参数 
   755                                  
   756                                  ;-----------在TCB链上追加任务控制块-----------------------------------------------------------------------
   757                                      append_to_tcb_link:                         ;在TCB链上追加任务控制块
   758                                                                                  ;输入：ECX=TCB线性基地址
   759 000005B5 FA                              cli                                     ;关中断，防止并发
   760                                          
   761 000005B6 50                              push eax
   762 000005B7 53                              push ebx
   763                                  
   764 000005B8 B8[73080000]                    mov eax,tcb_chain
   765                                      .b0:                                   ;EAX=链表头或当前TCB线性地址
   766 000005BD 8B18                            mov ebx,[eax]                      ;EBX=下一个TCB线性地址
   767 000005BF 09DB                            or ebx,ebx
   768 000005C1 7404                            jz .b1                             ;链表为空，或已到末尾
   769 000005C3 89D8                            mov eax,ebx                        ;定位到下一个TCB（的线性地址）
   770 000005C5 EBF6                            jmp .b0
   771                                  
   772                                      .b1:
   773 000005C7 8908                            mov [eax],ecx
   774 000005C9 C70100000000                    mov dword [ecx],0x00000000         ;当前TCB指针域清零，以指示这是最
   775                                                                          ;后一个TCB
   776 000005CF 5B                              pop ebx
   777 000005D0 58                              pop eax
   778                                          
   779 000005D1 FB                              sti
   780                                          
   781 000005D2 C3                              ret
   782                                  
   783                                  ;-----------程序入口-----------------------------------------------------------------------
   784                                      start:
   785                                          ;创建中断描述符表IDT
   786                                          ;在此之前，禁止调用put_string过程，以及任何含有sti指令的过程。
   787                                          
   788                                          ;前20个向量是处理器异常使用的
   789 000005D3 B8[4E020000]                    mov eax,general_exception_handler  ;中断门代码偏移地址
   790 000005D8 66BB0800                        mov bx,flat_4gb_code_seg_sel       ;中断门代码选择子
   791 000005DC 66B9008E                        mov cx,0x8e00                      ;32位中断门，0特权级
   792 000005E0 9A[7F010000]0800                call flat_4gb_code_seg_sel:make_gate_descriptor     ;构造中断门
   793                                  
   794 000005E7 BB00F00180                      mov ebx,idt_linear_address         ;中断描述符表的线性地址
   795 000005EC 31F6                            xor esi,esi
   796                                      .idt0:
   797 000005EE 8904F3                          mov [ebx+esi*8],eax
   798 000005F1 8954F304                        mov [ebx+esi*8+4],edx
   799 000005F5 46                              inc esi
   800 000005F6 83FE13                          cmp esi,19                         ;安装前20个异常中断处理过程
   801 000005F9 7EF3                            jle .idt0
   802                                  
   803                                          ;其余为保留或硬件使用的中断向量
   804 000005FB B8[45020000]                    mov eax,general_interrupt_handler  ;中断门代码偏移地址
   805 00000600 66BB0800                        mov bx,flat_4gb_code_seg_sel       ;中断门代码选择子
   806 00000604 66B9008E                        mov cx,0x8e00                      ;32位中断门，0特权级
   807 00000608 9A[7F010000]0800                call flat_4gb_code_seg_sel:make_gate_descriptor     ;构造中断门
   808                                  
   809 0000060F BB00F00180                      mov ebx,idt_linear_address         ;中断描述符表的线性地址
   810                                      .idt1:
   811 00000614 8904F3                          mov [ebx+esi*8],eax
   812 00000617 8954F304                        mov [ebx+esi*8+4],edx
   813 0000061B 46                              inc esi
   814 0000061C 81FEFF000000                    cmp esi,255                        ;安装普通的中断处理过程,中断总共有256个
   815 00000622 7EF0                            jle .idt1
   816                                  
   817                                          ;设置实时时钟中断处理过程，可以进行任务切换
   818 00000624 B8[5B020000]                    mov eax,rtm_0x70_interrupt_handle  ;中断门代码偏移地址
   819 00000629 66BB0800                        mov bx,flat_4gb_code_seg_sel       ;中断门代码选择子
   820 0000062D 66B9008E                        mov cx,0x8e00                      ;32位中断门，0特权级
   821 00000631 9A[7F010000]0800                call flat_4gb_code_seg_sel:make_gate_descriptor     ;构造中断门
   822                                  
   823 00000638 BB00F00180                      mov ebx,idt_linear_address         ;中断描述符表的线性地址
   824 0000063D 898380030000                    mov [ebx+0x70*8],eax               ;0x70号中断向量是时钟中断
   825 00000643 899384030000                    mov [ebx+0x70*8+4],edx
   826                                  
   827                                          ;准备开放中断
   828 00000649 66C705[6D080000]FF-             mov word [pidt],256*8-1            ;中断描述符表的界限值
   828 00000651 07                 
   829 00000652 C705[6F080000]00F0-             mov dword [pidt+2],idt_linear_address
   829 0000065A 0180               
   830 0000065C 0F011D[6D080000]                lidt [pidt]                        ;加载中断描述符表寄存器IDTR
   831                                  
   832                                          ;设置8259A中断控制器
   833 00000663 B011                            mov al,0x11
   834 00000665 E620                            out 0x20,al                        ;ICW1：边沿触发/级联方式
   835 00000667 B020                            mov al,0x20
   836 00000669 E621                            out 0x21,al                        ;ICW2:起始中断向量
   837 0000066B B004                            mov al,0x04
   838 0000066D E621                            out 0x21,al                        ;ICW3:从片级联到IR2
   839 0000066F B001                            mov al,0x01
   840 00000671 E621                            out 0x21,al                        ;ICW4:非总线缓冲，全嵌套，正常EOI
   841                                  
   842 00000673 B011                            mov al,0x11
   843 00000675 E6A0                            out 0xa0,al                        ;ICW1：边沿触发/级联方式
   844 00000677 B070                            mov al,0x70
   845 00000679 E6A1                            out 0xa1,al                        ;ICW2:起始中断向量
   846 0000067B B004                            mov al,0x04
   847 0000067D E6A1                            out 0xa1,al                        ;ICW3:从片级联到IR2
   848 0000067F B001                            mov al,0x01
   849 00000681 E6A1                            out 0xa1,al                        ;ICW4:非总线缓冲，全嵌套，正常EOI
   850                                  
   851                                          ;设置和时钟中断相关的硬件 
   852 00000683 B00B                            mov al,0x0b                        ;RTC寄存器B
   853 00000685 0C80                            or al,0x80                         ;阻断NMI
   854 00000687 E670                            out 0x70,al
   855 00000689 B012                            mov al,0x12                        ;设置寄存器B，禁止周期性中断，开放更
   856 0000068B E671                            out 0x71,al                        ;新结束后中断，BCD码，24小时制
   857                                  
   858 0000068D E4A1                            in al,0xa1                         ;读8259从片的IMR寄存器
   859 0000068F 24FE                            and al,0xfe                        ;清除bit 0(此位连接RTC)
   860 00000691 E6A1                            out 0xa1,al                        ;写回此寄存器
   861                                  
   862 00000693 B00C                            mov al,0x0c
   863 00000695 E670                            out 0x70,al
   864 00000697 E471                            in al,0x71                         ;读RTC寄存器C，复位未决的中断状态
   865                                  
   866 00000699 FB                              sti                                ;开放硬件中断
   867                                  
   868 0000069A BB[130D0000]                    mov ebx,message_0
   869 0000069F 9A[08000000]0800                call flat_4gb_code_seg_sel:put_string
   870                                  
   871                                          ;显示处理器品牌信息 
   872 000006A6 B802000080                      mov eax,0x80000002
   873 000006AB 0FA2                            cpuid
   874 000006AD A3[FA0F0000]                    mov [cpu_brand + 0x00],eax
   875 000006B2 891D[FE0F0000]                  mov [cpu_brand + 0x04],ebx
   876 000006B8 890D[02100000]                  mov [cpu_brand + 0x08],ecx
   877 000006BE 8915[06100000]                  mov [cpu_brand + 0x0c],edx
   878                                      
   879 000006C4 B803000080                      mov eax,0x80000003
   880 000006C9 0FA2                            cpuid
   881 000006CB A3[0A100000]                    mov [cpu_brand + 0x10],eax
   882 000006D0 891D[0E100000]                  mov [cpu_brand + 0x14],ebx
   883 000006D6 890D[12100000]                  mov [cpu_brand + 0x18],ecx
   884 000006DC 8915[16100000]                  mov [cpu_brand + 0x1c],edx
   885                                  
   886 000006E2 B804000080                      mov eax,0x80000004
   887 000006E7 0FA2                            cpuid
   888 000006E9 A3[1A100000]                    mov [cpu_brand + 0x20],eax
   889 000006EE 891D[1E100000]                  mov [cpu_brand + 0x24],ebx
   890 000006F4 890D[22100000]                  mov [cpu_brand + 0x28],ecx
   891 000006FA 8915[26100000]                  mov [cpu_brand + 0x2c],edx
   892                                  
   893 00000700 BB[F50F0000]                    mov ebx,cpu_brnd0                  ;显示处理器品牌信息 
   894 00000705 9A[08000000]0800                call flat_4gb_code_seg_sel:put_string
   895 0000070C BB[FA0F0000]                    mov ebx,cpu_brand
   896 00000711 9A[08000000]0800                call flat_4gb_code_seg_sel:put_string
   897 00000718 BB[2E100000]                    mov ebx,cpu_brnd1
   898 0000071D 9A[08000000]0800                call flat_4gb_code_seg_sel:put_string
   899                                  
   900                                          ;以下开始安装为整个系统服务的调用门。特权级之间的控制转移必须使用门
   901 00000724 BF[D7080000]                    mov edi,salt                       ;C-SALT表的起始位置 
   902 00000729 B904000000                      mov ecx,salt_items                 ;C-SALT表的条目数量 
   903                                      .b4:
   904 0000072E 51                              push ecx   
   905 0000072F 8B8700010000                    mov eax,[edi+256]                  ;该条目入口点的32位偏移地址 
   906 00000735 668B9F04010000                  mov bx,[edi+260]                   ;该条目入口点的段选择子 
   907 0000073C 66B900EC                        mov cx,1_11_0_1100_000_00000B      ;特权级3的调用门(3以上的特权级才
   908                                                                          ;允许访问)，0个参数(因为用寄存器
   909                                                                          ;传递参数，而没有用栈) 
   910 00000740 9A[7F010000]0800                call flat_4gb_code_seg_sel:make_gate_descriptor
   911 00000747 9A[1C010000]0800                call flat_4gb_code_seg_sel:set_up_gdt_descriptor
   912 0000074E 66898F04010000                  mov [edi+260],cx                   ;将返回的门描述符选择子回填
   913 00000755 81C706010000                    add edi,salt_item_len              ;指向下一个C-SALT条目 
   914 0000075B 59                              pop ecx
   915 0000075C E2D0                            loop .b4
   916                                  
   917                                          ;对门进行测试 
   918 0000075E BB[860D0000]                    mov ebx,message_1
   919 00000763 FF1D[D7090000]                  call far [salt_1+256]              ;通过门显示信息(偏移量将被忽略) 
   920                                  
   921                                          ;初始化程序管理器任务的任务控制块TCB,单个任务块的大小为70字节
   922 00000769 66C705[7B080000]FF-             mov word [core_tcb+0x04],0xffff    ;任务状态：忙碌
   922 00000771 FF                 
   923 00000772 C705[7D080000]0000-             mov dword [core_tcb+0x06],0x80100000   
   923 0000077A 1080               
   924                                  
   925                                                                             ;内核虚拟空间的分配从这里开始。
   926 0000077C 66C705[81080000]FF-             mov word [core_tcb+0x0a],0xffff    ;登记LDT初始的界限到TCB中（未使用）
   926 00000784 FF                 
   927 00000785 B9[77080000]                    mov ecx,core_tcb
   928 0000078A E826FEFFFF                      call append_to_tcb_link            ;将此TCB添加到TCB链中
   929                                  
   930                                          ;为程序管理器的TSS分配内存空间,使用宏
   931                                          alloc_core_linear
    10 0000078F 8B1D[7D080000]      <1>  mov ebx,[core_tcb+0x06]
    11 00000795 8105[7D080000]0010- <1>  add dword [core_tcb+0x06],0x1000
    11 0000079D 0000                <1>
    12 0000079F 9A[C3010000]0800    <1>  call flat_4gb_code_seg_sel:alloc_inst_a_page
   932                                  
   933                                          ;在程序管理器的TSS中设置必要的项目 
   934 000007A6 66C7030000                      mov word [ebx+0],0                 ;反向链=0
   935 000007AB 0F20D8                          mov eax,cr3
   936 000007AE 89431C                          mov dword [ebx+28],eax             ;登记CR3(PDBR)
   937 000007B1 66C743600000                    mov word [ebx+96],0                ;没有LDT。处理器允许没有LDT的任务。
   938 000007B7 66C743640000                    mov word [ebx+100],0               ;T=0
   939 000007BD 66C743666700                    mov word [ebx+102],103             ;没有I/O位图。0特权级事实上不需要。
   940                                          
   941                                          ;创建程序管理器的TSS描述符，并安装到GDT中 
   942 000007C3 89D8                            mov eax,ebx                        ;TSS的起始线性地址
   943 000007C5 BB67000000                      mov ebx,103                        ;段长度（界限）
   944 000007CA B900894000                      mov ecx,0x00408900                 ;TSS描述符，特权级0
   945 000007CF 9A[64010000]0800                call flat_4gb_code_seg_sel:make_seg_descriptor
   946 000007D6 9A[1C010000]0800                call flat_4gb_code_seg_sel:set_up_gdt_descriptor
   947 000007DD 66890D[8F080000]                mov [core_tcb+0x18],cx             ;登记内核任务的TSS选择子到其TCB
   948                                  
   949                                          ;任务寄存器TR中的内容是任务存在的标志，该内容也决定了当前任务是谁。
   950                                          ;下面的指令为当前正在执行的0特权级任务“程序管理器”后补手续（TSS）。
   951 000007E4 0F00D9                          ltr cx
   952                                  
   953                                          ;现在可认为“程序管理器”任务正执行中
   954                                  
   955                                          ;创建用户任务的任务控制块,使用宏在内核空间分配
   956                                          alloc_core_linear
    10 000007E7 8B1D[7D080000]      <1>  mov ebx,[core_tcb+0x06]
    11 000007ED 8105[7D080000]0010- <1>  add dword [core_tcb+0x06],0x1000
    11 000007F5 0000                <1>
    12 000007F7 9A[C3010000]0800    <1>  call flat_4gb_code_seg_sel:alloc_inst_a_page
   957                                  
   958 000007FE 66C743040000                    mov word [ebx+0x04],0              ;任务状态：空闲 
   959 00000804 C7430600000000                  mov dword [ebx+0x06],0             ;用户任务局部空间的分配从0开始。
   960 0000080B 66C7430AFFFF                    mov word [ebx+0x0a],0xffff         ;登记LDT初始的界限到TCB中
   961                                      
   962 00000811 6A32                            push dword 50                      ;用户程序1位于逻辑50扇区
   963 00000813 53                              push ebx                           ;压入任务控制块起始线性地址 
   964 00000814 E8F0FAFFFF                      call load_relocate_program
   965 00000819 89D9                            mov ecx,ebx         
   966 0000081B E895FDFFFF                      call append_to_tcb_link            ;将此TCB添加到TCB链中
   967                                  
   968                                          ;创建用户任务的任务控制块
   969                                          alloc_core_linear                  ;宏：在内核的虚拟地址空间分配内存
    10 00000820 8B1D[7D080000]      <1>  mov ebx,[core_tcb+0x06]
    11 00000826 8105[7D080000]0010- <1>  add dword [core_tcb+0x06],0x1000
    11 0000082E 0000                <1>
    12 00000830 9A[C3010000]0800    <1>  call flat_4gb_code_seg_sel:alloc_inst_a_page
   970                                  
   971 00000837 66C743040000                    mov word [ebx+0x04],0              ;任务状态：空闲
   972 0000083D C7430600000000                  mov dword [ebx+0x06],0             ;用户任务局部空间的分配从0开始。
   973 00000844 66C7430AFFFF                    mov word [ebx+0x0a],0xffff         ;登记LDT初始的界限到TCB中
   974                                  
   975 0000084A 6A64                            push dword 100                     ;用户程序2位于逻辑100扇区
   976 0000084C 53                              push ebx                           ;压入任务控制块起始线性地址
   977 0000084D E8B7FAFFFF                      call load_relocate_program
   978 00000852 89D9                            mov ecx,ebx
   979 00000854 E85CFDFFFF                      call append_to_tcb_link            ;将此TCB添加到TCB链中
   980                                  
   981                                      .core:
   982 00000859 BB[C70D0000]                    mov ebx,core_msg0
   983 0000085E 9A[08000000]0800                call flat_4gb_code_seg_sel:put_string
   984                                          
   985                                          ;这里可以编写回收已终止任务内存的代码
   986                                          
   987 00000865 EBF2                            jmp .core
   988                                  
   989                                  ;-----------数据区-----------------------------------------------------------------------
   990 00000867 0000                        pgdt            dw  0             ;用于设置和修改GDT 
   991 00000869 00000000                                    dd  0
   992                                  
   993 0000086D 0000                        pidt            dw  0             ;中断描述符表
   994 0000086F 00000000                                    dd  0
   995                                                      
   996                                      ;任务控制块链
   997 00000873 00000000                    tcb_chain       dd  0 
   998                                  
   999 00000877 00<rep 20h>                 core_tcb   times  32  db 0         ;内核（程序管理器）的TCB
  1000                                  
  1001 00000897 FFFFFFFFFFFF5555            page_bit_map    db  0xff,0xff,0xff,0xff,0xff,0xff,0x55,0x55
  1002 0000089F FFFFFFFFFFFFFFFF                            db  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
  1003 000008A7 FFFFFFFFFFFFFFFF                            db  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
  1004 000008AF FFFFFFFFFFFFFFFF                            db  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
  1005 000008B7 5555555555555555                            db  0x55,0x55,0x55,0x55,0x55,0x55,0x55,0x55
  1006 000008BF 0000000000000000                            db  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  1007 000008C7 0000000000000000                            db  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  1008 000008CF 0000000000000000                            db  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  1009                                      page_map_len     equ $-page_bit_map
  1010                                                      
  1011                                      ;符号地址检索表
  1012                                      salt:
  1013 000008D7 405072696E74537472-         salt_1          db  '@PrintString'
  1013 000008E0 696E67             
  1014 000008E3 00<rep F4h>                             times 256-($-salt_1) db 0
  1015 000009D7 [08000000]                                  dd  put_string
  1016 000009DB 0800                                        dw  flat_4gb_code_seg_sel
  1017                                  
  1018 000009DD 40526561644469736B-         salt_2          db  '@ReadDiskData'
  1018 000009E6 44617461           
  1019 000009EA 00<rep F3h>                             times 256-($-salt_2) db 0
  1020 00000ADD [B4000000]                                  dd  read_hard_disk_0
  1021 00000AE1 0800                                        dw  flat_4gb_code_seg_sel
  1022                                  
  1023 00000AE3 405072696E7444776F-         salt_3          db  '@PrintDwordAsHexString'
  1023 00000AEC 726441734865785374-
  1023 00000AF5 72696E67           
  1024 00000AF9 00<rep EAh>                             times 256-($-salt_3) db 0
  1025 00000BE3 [FB000000]                                  dd  put_hex_dword
  1026 00000BE7 0800                                        dw  flat_4gb_code_seg_sel
  1027                                  
  1028 00000BE9 405465726D696E6174-         salt_4           db  '@TerminateProgram'
  1028 00000BF2 6550726F6772616D   
  1029 00000BFA 00<rep EFh>                             times 256-($-salt_4) db 0
  1030 00000CE9 [B3020000]                                  dd  terminate_current_task
  1031 00000CED 0800                                        dw  flat_4gb_code_seg_sel
  1032                                  
  1033                                      salt_item_len   equ $-salt_4
  1034                                      salt_items      equ ($-salt)/salt_item_len
  1035                                  
  1036 00000CEF 2A2A2A2A2A2A2A2A45-         excep_msg       db  '********Exception encounted********',0
  1036 00000CF8 7863657074696F6E20-
  1036 00000D01 656E636F756E746564-
  1036 00000D0A 2A2A2A2A2A2A2A2A00 
  1037                                  
  1038 00000D13 2020576F726B696E67-         message_0       db  '  Working in system core with protection '
  1038 00000D1C 20696E207379737465-
  1038 00000D25 6D20636F7265207769-
  1038 00000D2E 74682070726F746563-
  1038 00000D37 74696F6E20         
  1039 00000D3C 616E6420706167696E-                         db  'and paging are all enabled.System core is mapped '
  1039 00000D45 672061726520616C6C-
  1039 00000D4E 20656E61626C65642E-
  1039 00000D57 53797374656D20636F-
  1039 00000D60 7265206973206D6170-
  1039 00000D69 70656420           
  1040 00000D6D 746F20616464726573-                         db  'to address 0x80000000.',0x0d,0x0a,0
  1040 00000D76 732030783830303030-
  1040 00000D7F 3030302E0D0A00     
  1041                                  
  1042 00000D86 202053797374656D20-         message_1       db  '  System wide CALL-GATE mounted.',0x0d,0x0a,0
  1042 00000D8F 776964652043414C4C-
  1042 00000D98 2D47415445206D6F75-
  1042 00000DA1 6E7465642E0D0A00   
  1043                                  
  1044 00000DA9 2A2A2A2A2A2A2A2A4E-         message_3       db  '********No more pages********',0
  1044 00000DB2 6F206D6F7265207061-
  1044 00000DBB 6765732A2A2A2A2A2A-
  1044 00000DC4 2A2A00             
  1045                                  
  1046 00000DC7 202053797374656D20-         core_msg0       db  '  System core task running!',0x0d,0x0a,0
  1046 00000DD0 636F7265207461736B-
  1046 00000DD9 2072756E6E696E6721-
  1046 00000DE2 0D0A00             
  1047                                  
  1048 00000DE5 303132333435363738-         bin_hex         db '0123456789ABCDEF'
  1048 00000DEE 39414243444546     
  1049                                                                      ;put_hex_dword子过程用的查找表 
  1050                                  
  1051 00000DF5 00<rep 200h>                core_buf   times 512 db 0          ;内核用的缓冲区
  1052                                  
  1053 00000FF5 0D0A202000                  cpu_brnd0       db 0x0d,0x0a,'  ',0
  1054 00000FFA 00<rep 34h>                 cpu_brand  times 52 db 0
  1055 0000102E 0D0A0D0A00                  cpu_brnd1       db 0x0d,0x0a,0x0d,0x0a,0
  1056                                  
  1057                                  
  1058                                      core_code_end:
  1059                                  
  1060                                  ;-----------尾部段-----------------------------------------------------------------------
  1061                                  section core_trail
  1062                                         core_end:   ;程序结尾标号，因为段没有定义vstart,所以该标号的偏移地址是从程序头开始的
