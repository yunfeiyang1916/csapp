     1                                  ;硬盘主引导扇区代码
     2                                  ;显示字符及地址第二版
     3                                  
     4 00000000 EB1F                    jmp start   ;跳过数据区
     5                                  
     6 00000002 4C076107620765076C-     mytext db 'L',0x07,'a',0x07,'b',0x07,'e',0x07,'l',0x07,' ',0x07,'o',0x07,            'f',0x07,'f',0x07,'s',0x07,'e',0x07,'t',0x07,':',0x07  ;0x07表示黑底白字 "\"是续行符
     6 0000000B 0720076F0766076607-
     6 00000014 7307650774073A07   
     8 0000001C 0000000000              number db 0,0,0,0,0     ;用于存储个、十、百、千、万位上的值
     9                                  
    10                                  start:
    11 00000021 B8C007                      mov ax,0x7c0    ;设置数据段基址
    12 00000024 8ED8                        mov ds,ax       
    13                                  
    14 00000026 B800B8                      mov ax,0xb800   ;设置附加段基址，就是显存起始地址
    15 00000029 8EC0                        mov es,ax
    16                                  
    17                                      ;段之间批量传送数据
    18 0000002B FC                          cld             ;将方向标志位DF清零,以指示传送是正方向的
    19 0000002C BE[0200]                    mov si,mytext   ;将源串的起始地址设置到源索引寄存器
    20 0000002F BF0000                      mov di,0        ;将显卡地址设置到目标索引寄存器
    21 00000032 B90D00                      mov cx,(number-mytext)/2 ;cx是计数器，设置要批量传送的字数
    22 00000035 F3A5                        rep movsw               ;如果cx的值不为0，则重复传送，每次传送完cx的值都递减
    23                                  
    24                                      ;开始计算number偏移地址十进制表示形式
    25 00000037 B8[1C00]                    mov ax,number   ;获取偏移地址，设置为被除数
    26                                  
    27 0000003A 89C3                        mov bx,ax       ;将偏移地址放到基址寄存器
    28 0000003C B90500                      mov cx,5        ;循环次数
    29 0000003F BE0A00                      mov si,10       ;除数
    30                                  digit:
    31 00000042 31D2                        xor dx,dx
    32 00000044 F7F6                        div si
    33 00000046 8817                        mov [bx],dl     ;将余数放到number标号出的内存中
    34 00000048 43                          inc bx          ;地址bx递增，用于指向下一个内存单元
    35 00000049 E2F7                        loop digit      ;先将cx值减一，如果cx的值不为0，则执行循环，否则向下继续执行
    36                                  
    37                                      ;显示各个位数
    38 0000004B BB[1C00]                    mov bx,number   ;将number出的偏移地址设置到基址寄存器上
    39 0000004E BE0400                      mov si,4        ;设置源索引寄存器，也是变址寄存器
    40                                  show:
    41 00000051 8A00                        mov al,[bx+si]  ;al表示ax低8位寄存器
    42 00000053 0430                        add al,0x30     ;数字转成ascii，需要+0x30
    43 00000055 B404                        mov ah,0x04     ;ah表示ax高8位寄存器,黑底红字
    44 00000057 268905                      mov [es:di],ax  ;将要显示的属性值及内容传送到显卡地址
    45 0000005A 83C702                      add di,2        ;目的索引寄存器+2
    46 0000005D 4E                          dec si          ;源索引寄存器递减
    47 0000005E 79F1                        jns show        ;如果未设置符号位SF则跳转到show,当dec si的结果为-1时，SF为1，则继续向下执行
    48                                  
    49 00000060 26C7054407                  mov word [es:di],0x0744;显示黑底白字\D  
    50 00000065 47                          inc di
    51                                      mov byte [es:di],bx   ;显示number处的二进制偏移地址
    51          ******************       error: mismatch in operand sizes
    52 00000066 47                          inc di
    53 00000067 26C60504                    mov byte [es:di],0x04 ;表示黑底红字
    54 0000006B 47                          inc di
    55 0000006C 26C645035C                  mov byte [es:di+3],'\B'
    55          ******************       warning: byte data exceeds bounds [-w+number-overflow]
    56 00000071 47                          inc di
    57 00000072 26C6450407                  mov byte [es:di+4],0x07 ;黑底白字
    58                                  
    59 00000077 EBFE                        jmp $           ;无限循环，"$"表示当前命令的偏移地址
    60                                  
    61 00000079 00<rep 185h>            times 510-($-$$)  db  0;剩余的字节数用0填充，'$$'表示当前段的起始地址，'$-$$'正好是当前程序的字节大小
    62 000001FE 55AA                                      db  0x55,0xaa;引导扇区结束标识
    63                                  
    64                                  
