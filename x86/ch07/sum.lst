     1                                  ;硬盘主引导扇区代码
     2                                  ;求累加和
     3                                  
     4 00000000 EB0E                    jmp start   ;跳过数据区
     5                                  
     6 00000002 312B322B332B2E2E2E-     message db '1+2+3+...+100=' ;声明一串字符串
     6 0000000B 2B3130303D         
     7                                  
     8                                  start:
     9 00000010 B8C007                      mov ax,0x7c0     ;设置数据段基址
    10 00000013 8ED8                        mov ds,ax
    11                                  
    12 00000015 B800B8                      mov ax,0xb800     ;设置附加段基址，就是显存起始地址
    13 00000018 8EC0                        mov es,ax   
    14                                  
    15                                      ;以下显示字符串,使用循环的方式传送字符串
    16 0000001A BE[0200]                    mov si,message     ;将源串的起始屁用地址设置到源索引寄存器
    17 0000001D BF0000                      mov di,0           ;将显卡偏移地址设置到目标索引寄存器
    18 00000020 B90E00                      mov cx,start-message;cx是计数器，设置要批量传送的字节数
    19                                  @g:
    20 00000023 8A04                        mov al,[si]     ;获取message处的内容
    21 00000025 268805                      mov [es:di],al  ;转移到显存
    22 00000028 47                          inc di          ;递增di
    23 00000029 26C60507                    mov byte [es:di],0x07   ;设置显示属性，黑底白字
    24 0000002D 47                          inc di
    25 0000002E 46                          inc si          ;源索引寄存器递增
    26 0000002F E2F2                        loop @g         ;先将cx值减一，如果cx的值不为0，则执行循环，否则向下继续执行
    27                                  
    28                                      ;以下计算1-100的和
    29 00000031 31C0                        xor ax,ax
    30 00000033 B90100                      mov cx,1    ;从1开始累加
    31                                  @f:
    32 00000036 01C8                        add ax,cx   ;求和
    33 00000038 41                          inc cx      ;递增计数器
    34 00000039 83F964                      cmp cx,100  ;cx-100进行比较
    35 0000003C 7EF8                        jle @f      ;cx小于等于100，则继续循环
    36                                  
    37                                      ;计算累加和的十进制数位，使用栈来处理
    38 0000003E 31C9                        xor cx,cx
    39 00000040 8ED1                        mov ss,cx   ;栈基址初始化为0
    40 00000042 89CC                        mov sp,cx   ;栈指针初始化为0
    41                                  
    42 00000044 BB0A00                      mov bx,10   ;除数
    43 00000047 31C9                        xor cx,cx   ;计数器，用于计算十进制数位个数
    44                                  @d:
    45 00000049 41                          inc cx      ;递增十进制位个数
    46 0000004A 31D2                        xor dx,dx
    47 0000004C F7F3                        div bx      ;除10
    48 0000004E 80CA30                      or dl,0x30  ;将十进制数转成ascii,等价于 add dl,0x30
    49 00000051 52                          push dx     ;将余数压入栈中，操作数必须是16位的
    50 00000052 83F800                      cmp ax,0    ;和是否不等于0
    51 00000055 75F2                        jne @d
    52                                      
    53                                      ;显示各个位数
    54                                  @a:
    55 00000057 5A                          pop dx  ;将栈顶元素弹出到数据寄存器中
    56 00000058 268815                      mov [es:di],dl
    57 0000005B 83C701                      add di,1
    58 0000005E 26C60504                    mov byte [es:di],0x04 ;黑底红字
    59 00000062 47                          inc di
    60 00000063 E2F2                        loop @a      ;先将cx值减一，如果cx的值不为0，则执行循环，否则向下继续执行
    61                                  
    62 00000065 EBFE                    jmp $   ;无限循环，"$"表示当前命令的偏移地址
    63                                  
    64                                  
    65 00000067 00<rep 197h>            times 510-($-$$)  db  0 ;剩余的字节数用0填充，'$$'表示当前段的起始地址，'$-$$'正好是当前程序的字节大小
    66 000001FE 55AA                                      db  0x55,0xaa ;引导扇区结束标识
    67                                      
