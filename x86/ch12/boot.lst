     1                                  ;保护模式示例
     2                                  ;硬盘主引导扇区代码
     3                                  
     4                                  ;设置栈段和栈指针
     5 00000000 668CC8                  mov eax,cs              ;栈段寄存器指向cs代码段
     6 00000003 8ED0                    mov ss,eax
     7 00000005 BC007C                  mov sp,0x7c00           ;栈指针指向代码起始位置，栈是向下增长的，范围为0x7c00-0x00
     8                                  
     9                                  ;计算GDT所在逻辑段的地址
    10 00000008 2E66A1[497D]            mov eax,[cs:pgdt+0x7c00+0x02]   ;GDT的32位线性基地址 
    11 0000000D 6631D2                  xor edx,edx                     
    12 00000010 66BB10000000            mov ebx,16
    13 00000016 66F7F3                  div ebx
    14 00000019 8ED8                    mov ds,eax                      ;商就是段地址
    15 0000001B 6689D3                  mov ebx,edx                     ;余数就是偏移地址
    16                                  
    17                                  ;创建#0描述符，它是空描述符，处理器要求的
    18 0000001E 6667C70300000000        mov dword [ebx],0x00
    19 00000026 6667C7430400000000      mov dword [ebx+0x04],0x00
    20                                  
    21                                  ;创建#1描述符，这是一个数据段，对应0~4GB的线性地址空间
    22 0000002F 6667C74308FFFF0000      mov dword [ebx+0x08],0x0000ffff    ;基地址为0，段界限为0xfffff
    23 00000038 6667C7430C0092CF00      mov dword [ebx+0x0c],0x00cf9200    ;粒度为4KB，存储器段描述符 
    24                                  
    25                                  ;#2描述符，创建保护模式下初始代码段描述符
    26 00000041 6667C74310FF01007C      mov dword [ebx+0x10],0x7c0001ff    ;基地址为0x00007c00，512字节 。该描述符指向的就是当前正在运行的引导程序
    27 0000004A 6667C7431400984000      mov dword [ebx+0x14],0x00409800    ;粒度为1个字节，代码段描述符。使用此代码段访问时该块内存是不能写的 
    28                                  
    29                                  ;#3描述符，创建保护模式代码段的别名描述符
    30 00000053 6667C74318FF01007C      mov dword [ebx+0x18],0x7c0001ff    ;基地址为0x00007c00，512字节
    31 0000005C 6667C7431C00924000      mov dword [ebx+0x1c],0x00409200    ;粒度为1个字节，数据段描述符。使用该段访问时该块内存是可写的
    32                                  
    33                                  ;创建#4描述符，保护模式下的堆栈段描述符
    34 00000065 6667C74320FEFF007C      mov dword [ebx+0x20],0x7c00fffe     ;基地址为0x00007c00,段界限为0xffffe
    35 0000006E 6667C743240096CF00      mov dword [ebx+0x24],0x00cf9600     ;粒度为4KB
    36                                  
    37                                  ;初始化描述符表寄存器GDTR
    38 00000077 2EC706[477D]2700        mov word [cs:pgdt+0x7c00],39        ;描述符表的界限，总共5个描述符，总字节数：5*8=40，需要在-1，所以是39
    39 0000007E 2E0F0116[477D]          lgdt [cs:pgdt+0x7c00]               ;加载全局描述符表寄存器，正好需要加载48位
    40                                  
    41 00000084 E492                    in al,0x92                          ;南桥芯片内的端口 
    42 00000086 0C02                    or al,0000_0010B
    43 00000088 E692                    out 0x92,al                         ;打开A20，使地址线A20可用
    44                                  
    45 0000008A FA                      cli                                 ;实模式下的中断不能在保护模式下运行了，所以需要禁掉中断
    46                                  
    47 0000008B 0F20C0                  mov eax,cr0                         ;cr0是控制寄存器0，位0用于控制是否开启保护模式
    48 0000008E 6683C801                or eax,1                            ;开启保护模式（PE）
    49 00000092 0F22C0                  mov cr0,eax
    50                                  
    51                                  ;以下进入保护模式
    52 00000095 66EA[9D000000]1000      jmp dword 0x0010:flush              ;16位描述符选择子（描述符表中的代码段，索引为2，因为每个描述符大小为8，所以需要乘以8）
    53                                                                      ;flush指的是32位偏移地址，jmp指令会清空流水线并串行化处理器
    54                                  
    55                                  [bits 32]                           ;按32位模式译码，也就是下面的代码是保护模式代码
    56                                  flush:
    57 0000009D B818000000                   mov eax,0x18                   ;16位描述符选择子，描述符表中的代码段别名描述符，索引为3
    58 000000A2 8ED8                         mov ds,eax
    59                                  
    60 000000A4 B808000000                   mov eax,0x08                   ;16位描述符选择子，描述符表中的数据段，索引为1
    61 000000A9 8EC0                         mov es,eax
    62 000000AB 8EE0                         mov fs,eax                    
    63 000000AD 8EE8                         mov gs,eax                     ;其他段
    64                                  
    65 000000AF B820000000                   mov eax,0x20                   ;16位描述符选择子，描述符表中的栈段，索引为4
    66 000000B4 8ED0                         mov ss,eax
    67 000000B6 31E4                         xor esp,esp                    ;栈指针设置为0
    68                                  
    69 000000B8 26C70500800B005007-          mov dword [es:0x0b8000],0x072e0750 ;字符'P'、'.'及其显示属性
    69 000000C1 2E07               
    70 000000C3 26C70504800B004D07-          mov dword [es:0x0b8004],0x072e074d ;字符'M'、'.'及其显示属性
    70 000000CC 2E07               
    71 000000CE 26C70508800B002007-          mov dword [es:0x0b8008],0x07200720 ;两个空白字符及其显示属性
    71 000000D7 2007               
    72 000000D9 26C7050C800B006F07-          mov dword [es:0x0b800c],0x076b076f ;字符'o'、'k'及其显示属性
    72 000000E2 6B07               
    73                                  
    74                                       ;开始冒泡排序
    75 000000E4 B924000000                   mov ecx,pgdt-string-1         ;遍历次数=串长度-1 
    76                                  @@1:
    77 000000E9 51                           push ecx                           ;32位模式下的loop使用ecx 
    78 000000EA 6631DB                       xor bx,bx                          ;32位模式下，偏移量可以是16位，也可以是后面的32位
    79                                  @@2:
    80 000000ED 66678B87[2201]               mov ax,[string+bx]                 ;一次读两个字符，ah上放的是高字节
    81 000000F3 38C4                         cmp ah,al
    82 000000F5 7D08                         jge @@3
    83 000000F7 86C4                         xchg al,ah                         ;交换内容
    84 000000F9 66678987[2201]               mov [string+bx],ax                 ;回写
    85                                  @@3:
    86 000000FF 6643                         inc bx
    87 00000101 E2EA                         loop @@2                           ;先将ecx值减一，如果ecx的值不为0，则执行循环，否则向下继续执行
    88 00000103 59                           pop ecx
    89 00000104 E2E3                         loop @@1
    90                                       
    91                                       ;以下循环输出排序后的结果
    92 00000106 B925000000                   mov ecx,pgdt-string
    93 0000010B 31DB                         xor ebx,ebx
    94                                  @@4:
    95 0000010D B407                         mov ah,0x07                        ;黑底白字
    96 0000010F 8A83[22010000]               mov al,[string+ebx]
    97 00000115 266689841BA0800B00           mov [es:0xb80a0+2*ebx],ax       ;演示0~4GB寻址。
    98 0000011E 43                           inc ebx
    99 0000011F E2EC                         loop @@4
   100                                  
   101 00000121 F4                      hlt
   102                                  
   103                                  ;-------------------------------------------------------------------------------
   104 00000122 73306B65346F723932-     string           db 's0ke4or92xap3fv8giuzjcy5l1m7hd6bnqtw.'
   104 0000012B 786170336676386769-
   104 00000134 757A6A6379356C316D-
   104 0000013D 37686436626E717477-
   104 00000146 2E                 
   105                                  ;-------------------------------------------------------------------------------
   106 00000147 0000                    pgdt dw 0           ;描述符表的界限
   107 00000149 007E0000                     dd 0x00007e00  ;全局描述符表起始物理地址，该地址刚好是主引导程序后面的地址。
   108                                                      ;总共是16位+32位=48位，正好与GDTR寄存器的位数匹配
   109                                  
   110                                  ;-------------------------------------------------------------------------------
   111 0000014D 00<rep B1h>             times 510-($-$$)  db  0 ;剩余的字节数用0填充，'$$'表示当前段的起始地址，'$-$$'正好是当前程序的字节大小
   112 000001FE 55AA                                      db  0x55,0xaa ;引导扇区结束标识
