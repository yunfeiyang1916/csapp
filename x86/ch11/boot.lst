     1                                  ;硬盘主引导扇区代码
     2                                  
     3                                  ;设置栈段和栈指针
     4 00000000 8CC8                    mov ax,cs               ;栈段寄存器指向cs代码段
     5 00000002 8ED0                    mov ss,ax
     6 00000004 BC007C                  mov sp,0x7c00           ;栈指针指向代码起始位置，栈是向下增长的，范围为0x7c00-0x00
     7                                  ;计算GDT所在逻辑段的地址
     8 00000007 2EA1[0C7D]              mov ax,[cs:gdt_base+0x7c00]     ;低16位
     9 0000000B 2E8B16[0E7D]            mov dx,[cs:gdt_base+0x7c00+2]   ;高16位
    10 00000010 BB1000                  mov bx,16
    11 00000013 F7F3                    div bx      
    12 00000015 8ED8                    mov ds,ax                       ;ax是商，也就是段地址放到ds中
    13 00000017 89D3                    mov bx,dx                       ;dx是余数，也就是偏移地址，放到bx中
    14                                  
    15                                  ;创建#0描述符，它是空描述符，处理器要求的
    16 00000019 66C70700000000          mov dword [bx],0x00
    17 00000020 66C7470400000000        mov dword [bx+0x04],0x00
    18                                  
    19                                  ;创建#1描述符，保护模式下的代码段描述符
    20 00000028 66C74708FF01007C        mov dword [bx+0x08],0x7c0001ff     
    21 00000030 66C7470C00984000        mov dword [bx+0x0c],0x00409800     ;线性基地址为0x00007c00,段界限为0x001FF。该描述符指向的就是当前正在运行的引导程序
    22                                  
    23                                  ;创建#2描述符，保护模式下的数据段描述符（文本模式下的显示缓冲区） 
    24 00000038 66C74710FFFF0080        mov dword [bx+0x10],0x8000ffff     ;线性基地址为0x000B8000,段界限为0x0ffff。该描述符指向的是显存地址
    25 00000040 66C747140B924000        mov dword [bx+0x14],0x0040920b     
    26                                  
    27                                  ;创建#3描述符，保护模式下的堆栈段描述符
    28 00000048 66C74718007A0000        mov dword [bx+0x18],0x00007a00     ;线性基地址为0x00000000,段界限为0x07a00
    29 00000050 66C7471C00964000        mov dword [bx+0x1c],0x00409600
    30                                  
    31                                  ;初始化描述符表寄存器GDTR
    32 00000058 2EC706[0A7D]1F00        mov word [cs:gdt_size+0x7c00],31    ;描述符表的界限，总共4个描述符，总字节数：4*8=32，需要在-1，所以是31
    33 0000005F 2E0F0116[0A7D]          lgdt [cs:gdt_size+0x7c00]           ;加载全局描述符表寄存器，正好需要加载48位
    34                                  
    35 00000065 E492                    in al,0x92                          ;南桥芯片内的端口 
    36 00000067 0C02                    or al,0000_0010B
    37 00000069 E692                    out 0x92,al                         ;打开A20，使地址线A20可用
    38                                  
    39 0000006B FA                      cli                                 ;实模式下的中断不能在保护模式下运行了，所以需要禁掉中断
    40                                  
    41 0000006C 0F20C0                  mov eax,cr0                         ;cr0是控制寄存器0，位0用于控制是否开启保护模式
    42 0000006F 6683C801                or eax,1                            ;开启保护模式（PE）
    43 00000073 0F22C0                  mov cr0,eax
    44                                  
    45                                  ;以下进入保护模式
    46 00000076 66EA[7E000000]0800      jmp dword 0x0008:flush              ;16位描述符选择子（描述符表中的代码段，索引为1，因为每个描述符大小为8，所以需要乘以8）
    47                                                                      ;flush指的是32位偏移地址，jmp指令会清空流水线并串行化处理器
    48                                  
    49                                  [bits 32]                           ;按32位模式译码，也就是下面的代码是保护模式代码
    50                                  flush:
    51 0000007E 66B91000                    mov cx,0x10                     ;16位描述符选择子，描述符表中的数据段，索引为2
    52 00000082 8ED9                        mov ds,cx                       
    53                                  
    54                                      ;以下在屏幕上显示"Protect mode OK." 
    55 00000084 C6050000000050              mov byte [0x00],'P'  
    56 0000008B C6050200000072              mov byte [0x02],'r'
    57 00000092 C605040000006F              mov byte [0x04],'o'
    58 00000099 C6050600000074              mov byte [0x06],'t'
    59 000000A0 C6050800000065              mov byte [0x08],'e'
    60 000000A7 C6050A00000063              mov byte [0x0a],'c'
    61 000000AE C6050C00000074              mov byte [0x0c],'t'
    62 000000B5 C6050E00000020              mov byte [0x0e],' '
    63 000000BC C605100000006D              mov byte [0x10],'m'
    64 000000C3 C605120000006F              mov byte [0x12],'o'
    65 000000CA C6051400000064              mov byte [0x14],'d'
    66 000000D1 C6051600000065              mov byte [0x16],'e'
    67 000000D8 C6051800000020              mov byte [0x18],' '
    68 000000DF C6051A0000004F              mov byte [0x1a],'O'
    69 000000E6 C6051C0000004B              mov byte [0x1c],'K'
    70                                      
    71                                      ;以下用简单的示例来帮助阐述32位保护模式下的堆栈操作 
    72 000000ED 66B91800                    mov cx,0x18                 ;栈段选择子，索引为3，3*8=0x18
    73 000000F1 8ED1                        mov ss,cx
    74 000000F3 BC007C0000                  mov esp,0x7c00              ;栈指针为0x7c00
    75                                  
    76 000000F8 89E5                        mov ebp,esp                 ;保存栈指针
    77 000000FA 6A2E                        push byte '.'               ;压入1字节立即数
    78                                  
    79 000000FC 83ED04                      sub ebp,4
    80 000000FF 39E5                        cmp ebp,esp                 ;判断压入立即数时esp是否-4
    81 00000101 7506                        jnz ghalt                   ;不相等则结束
    82 00000103 58                          pop eax
    83 00000104 A21E000000                  mov byte [0x1e],al          ;显示.
    84                                  
    85                                  ghalt:
    86 00000109 F4                          hlt                         ;使CPU进入低功耗状态。已经禁止中断，将不会被唤醒 
    87                                  
    88                                  ;-------------------------------------------------------------------------------
    89 0000010A 0000                    gdt_size dw 0           ;描述符表的界限
    90 0000010C 007E0000                gdt_base dd 0x00007e00  ;全局描述符表起始物理地址，该地址刚好是主引导程序后面的地址。
    91                                                          ;总共是16位+32位=48位，正好与GDTR寄存器的位数匹配
    92                                  
    93 00000110 00<rep EEh>             times 510-($-$$)  db  0 ;剩余的字节数用0填充，'$$'表示当前段的起始地址，'$-$$'正好是当前程序的字节大小
    94 000001FE 55AA                                      db  0x55,0xaa ;引导扇区结束标识
